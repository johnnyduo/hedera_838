{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length == 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@solidstate/contracts/access/ownable/OwnableStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nlibrary OwnableStorage {\n    struct Layout {\n        address owner;\n    }\n\n    bytes32 internal constant STORAGE_SLOT =\n        keccak256('solidstate.contracts.storage.Ownable');\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/EarthRegistrarController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./optidomains/INameWrapper.sol\";\r\nimport \"./optidomains/AttestationStation.sol\";\r\nimport \"./optidomains/IOptiDomainsAttestation.sol\";\r\nimport \"./InsuranceFactory.sol\";\r\nimport \"./InsurancePool.sol\";\r\n\r\nimport {SignatureChecker} from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\r\n\r\nbytes32 constant INSURANCE_DETAIL = keccak256(\"838.earth.detail\");\r\nbytes32 constant INSURANCE_VALIDATION = keccak256(\"838.earth.validation\");\r\n\r\nerror Forbidden();\r\n\r\ninterface IEarthResolver {\r\n  event AddrChanged(bytes32 indexed node, address a);\r\n\r\n  /**\r\n   * Returns the address associated with an ENS node.\r\n   * @param node The ENS node to query.\r\n   * @return The associated address.\r\n   */\r\n  function addr(bytes32 node) external view returns (address payable);\r\n\r\n  /**\r\n   * Sets the address associated with an ENS node.\r\n   * May only be called by the owner of that node in the ENS registry.\r\n   * @param node The node to update.\r\n   * @param a The address to set.\r\n   */\r\n  function setAddr(\r\n    bytes32 node,\r\n    address a\r\n  ) external;\r\n\r\n  function setEarthKyc(bytes32 node, bytes32 kycHash) external;\r\n  function earthKyc(bytes32 node) external view returns(bytes32);\r\n}\r\n\r\ncontract EarthRegistrarController is Ownable {\r\n  mapping(address => bool) public isValidator;\r\n\r\n  address immutable operator;\r\n  bytes32 public immutable rootNode;\r\n  INameWrapper public immutable nameWrapper;\r\n  IEarthResolver public immutable resolver;\r\n  IERC20 public immutable baseToken;\r\n  InsuranceFactory public immutable factory;\r\n\r\n  AttestationStation public immutable attestationStation;\r\n  IOptiDomainsAttestation public immutable attestationDomain;\r\n\r\n  struct PartnerGoal {\r\n    uint256 method;\r\n    uint256 year;\r\n    InsurancePool pool;\r\n  }\r\n\r\n  mapping(bytes32 => PartnerGoal) public partnerGoal;\r\n\r\n  struct InsuranceDetail {\r\n    bytes32 partner;\r\n    uint256 goalMethod;\r\n    uint256 goalYear;\r\n    uint256 goalTon;\r\n    uint256 acheivedTon;\r\n    uint256 premium;\r\n  }\r\n\r\n  mapping(bytes32 => InsuranceDetail) public insuranceDetail;\r\n\r\n  mapping(bytes32 => address) public domainOwner;\r\n\r\n  constructor(\r\n    address _operator,\r\n    bytes32 _rootNode, \r\n    INameWrapper _nameWrapper,\r\n    IEarthResolver _resolver,\r\n    IERC20 _baseToken,\r\n    InsuranceFactory _factory,\r\n    IOptiDomainsAttestation _attestation\r\n  ) {\r\n    operator = _operator;\r\n    rootNode = _rootNode;\r\n    nameWrapper = _nameWrapper;\r\n    resolver = _resolver;\r\n    baseToken = _baseToken;\r\n    factory = _factory;\r\n\r\n    attestationDomain = _attestation;\r\n    attestationStation = _attestation.attestationStation();\r\n  }\r\n\r\n  function register(string calldata name, address owner, uint64 expiration, bytes32 kycHash, bytes calldata signature) public {\r\n    // Reduce time to integrate frontend\r\n    // if (\r\n    //   !SignatureChecker.isValidSignatureNow(\r\n    //     operator,\r\n    //     keccak256(\r\n    //       abi.encodePacked(\r\n    //         bytes1(0x19),\r\n    //         bytes1(0),\r\n    //         address(this),\r\n    //         uint256(block.chainid),\r\n    //         bytes32(\r\n    //           0xdd007bd789f73e08c2714644c55b11c7d202931d717def434e3c9caa12a9f583\r\n    //         ), // keccak256(\"register\")\r\n    //         name,\r\n    //         owner,\r\n    //         expiration,\r\n    //         kycHash\r\n    //       )\r\n    //     ),\r\n    //     signature\r\n    //   )\r\n    // ) {\r\n    //   revert Forbidden();\r\n    // }\r\n\r\n    bytes32 node = keccak256(abi.encodePacked(rootNode, keccak256(bytes(name))));\r\n    \r\n    nameWrapper.setSubnodeOwner(rootNode, name, address(this), 0, expiration);\r\n    nameWrapper.setResolver(node, address(resolver));\r\n    resolver.setAddr(node, owner);\r\n    resolver.setEarthKyc(node, kycHash);\r\n\r\n    domainOwner[node] = owner;\r\n  }\r\n\r\n  function deployPartner(bytes32 node, uint256 method, uint256 year) public {\r\n    require(method != 0, \"Unknown method\");\r\n    require(year != 0, \"Unknown year\");\r\n    require(msg.sender == domainOwner[node], \"Not owner\");\r\n\r\n    InsurancePool pool = factory.deployPool(\r\n      domainOwner[node],\r\n      baseToken,\r\n      0,\r\n      0,\r\n      0,\r\n      3500,\r\n      0,\r\n      1893460000 + 31600000 * (year - 2030),\r\n      \"838.Earth\",\r\n      \"EARTH\"\r\n    );\r\n\r\n    partnerGoal[node] = PartnerGoal({\r\n      method: method,\r\n      year: year,\r\n      pool: pool\r\n    });\r\n  }\r\n\r\n  function deployValidator(address _validator, bool _enabled) public onlyOwner {\r\n    isValidator[_validator] = _enabled;\r\n  }\r\n\r\n  event BuyInsurance(bytes32 node, bytes32 partner, string name, uint256 goalTon, uint256 premium);\r\n  function buyInsurance(\r\n    bytes32 node,\r\n    bytes32 partner,\r\n    string calldata name,\r\n\r\n    uint256 goalTon,\r\n    uint256 premium\r\n  ) public {\r\n    require(partnerGoal[partner].method > 0, \"Not registered\");\r\n\r\n    address owner = nameWrapper.ownerOf(uint256(node));\r\n    nameWrapper.setSubnodeOwner(node, name, owner, 0, uint64(block.timestamp + 365 days));\r\n\r\n    insuranceDetail[node] = InsuranceDetail({\r\n      partner: partner,\r\n      goalMethod: partnerGoal[partner].method,\r\n      goalYear: partnerGoal[partner].year,\r\n      goalTon: goalTon,\r\n      acheivedTon: 0,\r\n      premium: premium\r\n    });\r\n\r\n    attestationStation.attest(attestationDomain.buildAttestationData(node, INSURANCE_DETAIL, 4, abi.encode(insuranceDetail[node])));\r\n\r\n    baseToken.transferFrom(msg.sender, address(partnerGoal[partner].pool), premium);\r\n\r\n    partnerGoal[partner].pool.distribute(premium);\r\n\r\n    emit BuyInsurance(node, partner, name, goalTon, premium);\r\n  }\r\n\r\n  event AttestProgress(address validator, bytes32 node, uint256 acheivedTon);\r\n  function attestProgress(bytes32 node, uint256 acheivedTon) public {\r\n    require(isValidator[msg.sender], \"Not a validator\");\r\n\r\n    InsuranceDetail storage oldDetail = insuranceDetail[node];\r\n\r\n    insuranceDetail[node] = InsuranceDetail({\r\n      partner: oldDetail.partner,\r\n      goalMethod: oldDetail.goalMethod,\r\n      goalYear: oldDetail.goalYear,\r\n      goalTon: oldDetail.goalTon,\r\n      acheivedTon: acheivedTon,\r\n      premium: oldDetail.premium\r\n    });\r\n\r\n    attestationStation.attest(attestationDomain.buildAttestationData(node, INSURANCE_DETAIL, 4, abi.encode(insuranceDetail[node])));\r\n    attestationStation.attest(msg.sender, INSURANCE_VALIDATION, abi.encode(msg.sender, node, acheivedTon));\r\n\r\n    emit AttestProgress(msg.sender, node, acheivedTon);\r\n  }\r\n\r\n  // DEBUG only\r\n  function takeoverRootNode() public onlyOwner {\r\n    nameWrapper.safeTransferFrom(address(this), msg.sender, uint256(rootNode), 1, \"\");\r\n  }\r\n\r\n  // For fast frontend development\r\n  function insuranceDetails(bytes32[] calldata ids) public view returns(InsuranceDetail[] memory details) {\r\n    details = new InsuranceDetail[](ids.length);\r\n\r\n    unchecked {\r\n      for (uint i; i < ids.length; ++i) {\r\n        details[i] = insuranceDetail[ids[i]];\r\n      }\r\n    }\r\n  }\r\n\r\n}"
    },
    "contracts/EarthResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"./optidomains/DiamondResolverUtil.sol\";\r\n\r\nbytes32 constant EARTH_RESOLVER_STORAGE = keccak256(\"838earth.resolver.EarthResolver\");\r\n\r\ncontract EarthResolver is DiamondResolverUtil, IERC165 {\r\n    function setEarthKyc(bytes32 node, bytes32 kycHash) public authorised(node) {\r\n        _attest(node, keccak256(abi.encodePacked(EARTH_RESOLVER_STORAGE)), abi.encode(kycHash));\r\n    }\r\n\r\n    function earthKyc(bytes32 node) public view returns(bytes32) {\r\n        bytes memory response = _readAttestation(node, keccak256(abi.encodePacked(EARTH_RESOLVER_STORAGE)));\r\n        return response.length == 0 ? bytes32(0) : abi.decode(response, (bytes32));\r\n    }\r\n\r\n    function supportsInterface(\r\n        bytes4 interfaceID\r\n    ) public view virtual override(IERC165) returns (bool) {\r\n        return false;\r\n    }\r\n}"
    },
    "contracts/FakeUSDC.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity >=0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n// Used for minting test ERC20s in our tests\r\ncontract FakeUSDC is ERC20(\"Fake USDC\", \"USDC\") {\r\n    bool public blocked;\r\n\r\n    bool public noReturnData;\r\n\r\n    constructor() {\r\n        blocked = false;\r\n        noReturnData = false;\r\n    }\r\n\r\n    function blockTransfer(bool blocking) external {\r\n        blocked = blocking;\r\n    }\r\n\r\n    function setNoReturnData(bool noReturn) external {\r\n        noReturnData = noReturn;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external returns (bool) {\r\n        _mint(to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public override returns (bool ok) {\r\n        if (blocked) {\r\n            return false;\r\n        }\r\n\r\n        super.transferFrom(from, to, amount);\r\n\r\n        if (noReturnData) {\r\n            assembly {\r\n                return(0, 0)\r\n            }\r\n        }\r\n\r\n        ok = true;\r\n    }\r\n}\r\n"
    },
    "contracts/IDevParameters.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDevParameters {\r\n  function investorDevFee() external view returns(uint256);\r\n  function buyerDevFee() external view returns(uint256);\r\n  function maxBuyerFee() external view returns(uint256);\r\n}"
    },
    "contracts/IDistribute.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDistribute {\r\n  function distribute(uint256 amount) external;\r\n}"
    },
    "contracts/InsuranceFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./InsurancePool.sol\";\r\nimport \"./IDevParameters.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract InsuranceFactory is Ownable, IDevParameters {\r\n  address public immutable poolImplementation;\r\n\r\n  // in BPS unit\r\n  uint256 public investorDevFee = 4000;\r\n  uint256 public buyerDevFee = 200;\r\n  uint256 public maxBuyerFee = 2000;\r\n  \r\n  constructor(address _poolImplementation) {\r\n    poolImplementation = _poolImplementation;\r\n  }\r\n\r\n  event DeployPool(address indexed owner, address indexed pool, uint256 expiration);\r\n  function deployPool(\r\n    address _owner,\r\n    IERC20 _baseToken,\r\n    uint256 _buyPercentageFee,\r\n    uint256 _depositPercentageFee,\r\n    uint256 _depositLimit,\r\n    uint256 _distributionRatio,\r\n    uint256 _masterchefRatio,\r\n    uint256 _expiration,\r\n    string memory _tokenName,\r\n    string memory _tokenSymbol\r\n  ) public returns(InsurancePool pool) {\r\n    pool = InsurancePool(Clones.clone(poolImplementation));\r\n    pool.initialize(\r\n      _owner, \r\n      _baseToken,\r\n      _buyPercentageFee,\r\n      _depositPercentageFee, \r\n      _depositLimit, \r\n      _distributionRatio, \r\n      _masterchefRatio, \r\n      _expiration, \r\n      _tokenName, \r\n      _tokenSymbol\r\n    );\r\n\r\n    emit DeployPool(_owner, address(pool), _expiration);\r\n  }\r\n\r\n  event UpdateInvestorDevFee(uint256 newFeeBps);\r\n  function updateInvestorDevFee(uint256 feeBps) public onlyOwner {\r\n    require(feeBps <= 10000, \"Invalid fee\");\r\n    investorDevFee = feeBps;\r\n    emit UpdateInvestorDevFee(feeBps);\r\n  }\r\n\r\n  event UpdateBuyerDevFee(uint256 newFeeBps);\r\n  function updateBuyerDevFee(uint256 feeBps) public onlyOwner {\r\n    // Limit to maxBuyerFee\r\n    require(feeBps <= maxBuyerFee, \"Invalid fee\");\r\n    buyerDevFee = feeBps;\r\n    emit UpdateBuyerDevFee(feeBps);\r\n  }\r\n\r\n  event UpdateMaxBuyerFee(uint256 newFeeBps);\r\n  function updateMaxBuyerFee(uint256 feeBps) public onlyOwner {\r\n    require(feeBps <= 10000, \"Invalid fee\");\r\n    maxBuyerFee = feeBps;\r\n    emit UpdateMaxBuyerFee(feeBps);\r\n  }\r\n}"
    },
    "contracts/InsuranceMasterchef.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"./InsurancePool.sol\";\r\nimport \"./IDistribute.sol\";\r\n\r\ninterface IMintableERC20 is IERC20 {\r\n\tfunction mint(address _to, uint256 _amount) external;\r\n}\r\n\r\ninterface ITransferable {\r\n\tfunction transfer(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// Note: Precaution not to add baseToken as a pool (not make any sense)\r\ncontract InsuranceMasterchef is ReentrancyGuardUpgradeable, IDistribute {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t// Info of each user.\r\n\tstruct UserInfo {\r\n\t\tuint256 amount; // How many LP tokens the user has provided.\r\n\t\tuint256 rewardDebt; // Reward debt. See explanation below.\r\n\t}\r\n\r\n\t// Info of each pool.\r\n\tstruct PoolInfo {\r\n\t\tIERC20 lpToken; // Address of LP token contract.\r\n\t\tuint256 allocPoint; // How many allocation points assigned to this pool. Percentage of reward to be distributed.\r\n\t\tuint256 lastRewardTimestamp; // Last block number that reward distribution occurs.\r\n\t\tuint256 accRewardPerShare; // Accumulated reward per share, times 1e12. See below.\r\n\t\tuint16 depositFeeBP; // Deposit fee in basis points\r\n\t}\r\n\r\n\t// The reward token\r\n\tIERC20 public baseToken;\r\n  // Insurance pool address\r\n\tInsurancePool public insurancePool;\r\n\t// Deposit Fee address\r\n\taddress public feeAddress;\r\n\r\n\t// Info of each pool.\r\n\tuint256[] public poolInfoPidList; // pid to massUpdatePool\r\n\taddress[] public poolInfoDummyList;\r\n\tmapping(uint256 => PoolInfo) public poolInfo;\r\n\t// Info of each user that stakes LP tokens.\r\n\tmapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\t// Total allocation points. Must be the sum of all allocation points in all pools.\r\n\tuint256 public totalAllocPoint;\r\n\t// Useless but copied from a masterchef implementation\r\n\tuint256 public startTimestamp;\r\n\r\n\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\tevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\tevent SetFeeAddress(address indexed user, address indexed newAddress);\r\n\r\n  /**\r\n   * @dev Tells the address of the owner\r\n   * @return the address of the owner\r\n   */\r\n  function owner() public view returns(address) {\r\n    return OwnableUpgradeable(insurancePool).owner();\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(insurancePool.isGovernance(msg.sender), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n\tfunction initialize(\r\n    address _insurancePool,\r\n\t\taddress _baseToken\r\n\t) external initializer {\r\n    insurancePool = InsurancePool(_insurancePool);\r\n\t\tbaseToken = IERC20(_baseToken);\r\n\t\tfeeAddress = insurancePool.owner();\r\n\t\tstartTimestamp = block.timestamp;\r\n\r\n\t\t__ReentrancyGuard_init();\r\n\t}\r\n\r\n\tfunction setStartTimestamp(uint256 newTimestamp) external onlyOwner {\r\n\t\trequire(block.timestamp < newTimestamp && block.timestamp < startTimestamp, \"already start\");\r\n\t\tstartTimestamp = newTimestamp;\r\n\r\n\t\tuint256 poolInfoPidListLength = poolInfoPidList.length;\r\n\t\tfor (uint256 i = 0; i < poolInfoPidListLength; i++) {\r\n\t\t\tpoolInfo[poolInfoPidList[i]].lastRewardTimestamp = newTimestamp;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction poolLength() external view returns (uint256) {\r\n\t\treturn poolInfoDummyList.length;\r\n\t}\r\n\r\n\tmapping(IERC20 => bool) public poolExistence;\r\n\r\n\tmodifier nonDuplicated(IERC20 _lpToken) {\r\n\t\trequire(poolExistence[_lpToken] == false, \"duplicated\");\r\n\t\t_;\r\n\t}\r\n\r\n\t// Add a new lp to the pool. Can only be called by the owner.\r\n\tfunction add(uint256 _allocPoint, IERC20 _lpToken, uint16 _depositFeeBP) external onlyOwner nonDuplicated(_lpToken) {\r\n\t\trequire(_depositFeeBP <= 10000, \"invalid deposit fee basis points\");\r\n\r\n\t\tuint256 newPid = poolInfoDummyList.length;\r\n\r\n\t\tuint256 lastRewardTimestamp = block.timestamp > startTimestamp ? block.timestamp : startTimestamp;\r\n\t\ttotalAllocPoint = totalAllocPoint + _allocPoint;\r\n\t\tpoolExistence[_lpToken] = true;\r\n\t\tpoolInfo[newPid] = PoolInfo({\r\n\t\t    lpToken: _lpToken,\r\n\t\t    allocPoint: _allocPoint,\r\n\t\t    lastRewardTimestamp: lastRewardTimestamp,\r\n\t\t    accRewardPerShare: 0,\r\n\t\t    depositFeeBP: _depositFeeBP\r\n\t\t});\r\n\t\tpoolInfoDummyList.push(address(_lpToken));\r\n\t\tpoolInfoPidList.push(newPid);\r\n\t}\r\n\r\n\t// emergency flag use when we add invalid token address to\r\n\tfunction remove(uint256 _pid, bool emergency) external onlyOwner {\r\n\t\tif (poolInfoPidList.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\trequire(address(pool.lpToken) != address(0), \"not found\");\r\n\r\n\t\tuint256 length = poolInfoPidList.length;\r\n\t\tfor (uint256 i = 0; i < length; ++i) {\r\n\t\t\tif (poolInfoPidList[i] == _pid) {\r\n\t\t\t\tif (pool.allocPoint == 0 || emergency) {\r\n\t\t\t\t\tpool.allocPoint = 0;\r\n\t\t\t\t\tpoolInfoPidList[i] = poolInfoPidList[length - 1];\r\n\t\t\t\t\tpoolInfoPidList.pop();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Update the given pool's reward allocation point and deposit fee. Can only be called by the owner.\r\n\tfunction set(uint256 _pid, uint256 _allocPoint, uint16 _depositFeeBP) external onlyOwner {\r\n\t\trequire(_depositFeeBP <= 10000, \"invalid deposit fee basis points\");\r\n\r\n\t\tuint256 prevAllocPoint = poolInfo[_pid].allocPoint;\r\n\t\ttotalAllocPoint = (totalAllocPoint - prevAllocPoint) + _allocPoint;\r\n\t\tpoolInfo[_pid].allocPoint = _allocPoint;\r\n\t\tpoolInfo[_pid].depositFeeBP = _depositFeeBP;\r\n\r\n\t\tif (_allocPoint > 0 && prevAllocPoint == 0) {\r\n\t\t\tuint256 length = poolInfoPidList.length;\r\n\t\t\tbool found = false;\r\n\t\t\tfor (uint256 i = 0; i < length; ++i) {\r\n\t\t\t\tif (poolInfoPidList[i] == _pid) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!found) {\r\n\t\t\t\tpoolInfoPidList.push(_pid);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// View function to see pending reward on frontend.\r\n\tfunction pendingReward(uint256 _pid, address _user) external view returns (uint256) {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][_user];\r\n\t\tuint256 accRewardPerShare = pool.accRewardPerShare;\r\n\t\treturn ((user.amount * accRewardPerShare) / 1e12) - user.rewardDebt;\r\n\t}\r\n\r\n\t// Update reward variables for all pools. Be careful of gas spending!\r\n\tfunction distribute(uint256 _amount) public {\r\n    require(msg.sender == address(insurancePool), \"Not insurance pool\");\r\n\t\tuint256 length = poolInfoPidList.length;\r\n\t\tfor (uint256 i = 0; i < length; ++i) {\r\n\t\t\tupdatePool(poolInfoPidList[i], _amount);\r\n\t\t}\r\n\t}\r\n\r\n\t// Update reward variables of the given pool to be up-to-date.\r\n\tfunction updatePool(uint256 _pid, uint256 _amount) public {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tif (block.timestamp <= pool.lastRewardTimestamp) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n\t\tif (lpSupply == 0 || pool.allocPoint == 0) {\r\n\t\t\tpool.lastRewardTimestamp = block.timestamp;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tpool.accRewardPerShare += ((pool.allocPoint * _amount * 1e12) / totalAllocPoint / lpSupply);\r\n\t\tpool.lastRewardTimestamp = block.timestamp;\r\n\t}\r\n\r\n\t// Deposit LP tokens for reward allocation.\r\n\tfunction deposit(uint256 _pid, uint256 _amount) public nonReentrant {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n\t\tuint256 pending = ((user.amount * pool.accRewardPerShare) / 1e12) - user.rewardDebt;\r\n\t\tif (pending > 0) {\r\n\t\t\tsafeRewardTransfer(msg.sender, pending);\r\n\t\t}\r\n\r\n\t\tif (_amount > 0) {\r\n\t\t\tpool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n\t\t\tif (pool.depositFeeBP > 0) {\r\n\t\t\t\tuint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\r\n\t\t\t\tpool.lpToken.safeTransfer(feeAddress, depositFee);\r\n\t\t\t\tuser.amount = (user.amount + _amount) - depositFee;\r\n\t\t\t} else {\r\n\t\t\t\tuser.amount = user.amount + _amount;\r\n\t\t\t}\r\n\t\t}\r\n\t\tuser.rewardDebt = (user.amount * pool.accRewardPerShare) / 1e12;\r\n\t\temit Deposit(msg.sender, _pid, _amount);\r\n\t}\r\n\r\n\tfunction harvestAll() external {\r\n\t\tuint256 length = poolInfoDummyList.length;\r\n\t\tfor (uint256 pid = 0; pid < length; ++pid) {\r\n\t\t\tdeposit(pid, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction harvestMany(uint256[] memory pids) external {\r\n\t\tuint256 length = pids.length;\r\n\t\tfor (uint256 i = 0; i < length; ++i) {\r\n\t\t\tdeposit(pids[i], 0);\r\n\t\t}\r\n\t}\r\n\r\n\t// Withdraw LP tokens.\r\n\tfunction withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\trequire(user.amount >= _amount, \"invalid amount\");\r\n\r\n\t\tuint256 pending = ((user.amount * pool.accRewardPerShare) / 1e12) - user.rewardDebt;\r\n\t\tif (pending > 0) {\r\n\t\t\tsafeRewardTransfer(msg.sender, pending);\r\n\t\t}\r\n\t\tif (_amount > 0) {\r\n\t\t\tuser.amount = user.amount - _amount;\r\n\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n\t\t}\r\n\t\tuser.rewardDebt = (user.amount * pool.accRewardPerShare) / 1e12;\r\n\t\temit Withdraw(msg.sender, _pid, _amount);\r\n\t}\r\n\r\n\t// Withdraw without caring about rewards. EMERGENCY ONLY.\r\n\tfunction emergencyWithdraw(uint256 _pid) external nonReentrant {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\tuint256 amount = user.amount;\r\n\t\tuser.amount = 0;\r\n\t\tuser.rewardDebt = 0;\r\n\t\tpool.lpToken.safeTransfer(address(msg.sender), amount);\r\n\t\temit EmergencyWithdraw(msg.sender, _pid, amount);\r\n\t}\r\n\r\n\t// Safe reward transfer function, just in case if rounding error causes pool to not have enough reward.\r\n\tfunction safeRewardTransfer(address _to, uint256 _amount) internal {\r\n\t\tuint256 rewardBal = baseToken.balanceOf(address(this));\r\n\r\n\t\tif (_amount > rewardBal) {\r\n\t\t\tbaseToken.safeTransfer(_to, rewardBal);\r\n\t\t} else {\r\n\t\t\tbaseToken.safeTransfer(_to, _amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setFeeAddress(address _feeAddress) external onlyOwner {\r\n\t\tfeeAddress = _feeAddress;\r\n\t\temit SetFeeAddress(msg.sender, _feeAddress);\r\n\t}\r\n}"
    },
    "contracts/InsuranceNft.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./InsurancePool.sol\";\r\nimport \"./IDevParameters.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\";\r\nimport \"./meta-transactions/EIP712Base.sol\";\r\n\r\nerror TokenIdUsed(uint256 tokenId);\r\nerror TokenNotExists(uint256 tokenId);\r\nerror NotOperator(address wallet);\r\nerror OnlyOwner();\r\nerror NonceReused(uint256 nonce);\r\nerror TooMuchFee(uint256 fee);\r\nerror InvalidMessageHash();\r\nerror InvalidTypeHash();\r\n\r\ncontract InsuranceNft is ERC721EnumerableUpgradeable, EIP712Base {\r\n  using SafeERC20 for IERC20;\r\n  \r\n  InsurancePool public pool;\r\n  IERC20 public baseToken;\r\n\r\n  string _name;\r\n  string _symbol;\r\n\r\n  mapping(address => bool) public operators;\r\n  mapping(uint256 => bytes) public tokenMessage;\r\n  mapping(uint256 => uint256) public tokenExpiration;\r\n  mapping(uint256 => mapping(uint256 => bool)) public tokenNonce;\r\n\r\n  mapping(uint256 => address) public tokenReferralAddress;\r\n  mapping(uint256 => uint256) public tokenReferralPercentage;\r\n\r\n  // in BPS unit\r\n  uint256 private buyerDevFee;\r\n\r\n  // EIP-712 typehash\r\n  bytes32 private constant BUY_TYPEHASH = keccak256(\r\n    bytes(\r\n      \"BuyInsurance(address to,uint256 price,uint256 tokenId,uint256 duration,address referral,uint256 referralPercentage,uint256 expiration,bytes message)\"\r\n    )\r\n  );\r\n\r\n  bytes32 private constant EXTEND_TYPEHASH = keccak256(\r\n    bytes(\r\n      \"ExtendInsurance(uint256 price,uint256 tokenId,uint256 nonce,uint256 duration,uint256 expiration,bytes message)\"\r\n    )\r\n  );\r\n\r\n  bytes32 private constant CLAIM_TYPEHASH = keccak256(\r\n    bytes(\r\n      \"Claim(address to,uint256 amount,uint256 tokenId,uint256 nonce,uint256 expiration,bytes message)\"\r\n    )\r\n  );\r\n\r\n  /**\r\n   * @dev Tells the address of the owner\r\n   * @return the address of the owner\r\n   */\r\n  function owner() public view returns(address) {\r\n    return pool.owner();\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(pool.isGovernance(msg.sender), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function initialize(\r\n    address _pool,\r\n    IERC20 _baseToken,\r\n    string memory _tokenName,\r\n    string memory _tokenSymbol\r\n  ) external initializer {\r\n    buyerDevFee = 10001;\r\n    pool = InsurancePool(_pool);\r\n    baseToken = _baseToken;\r\n    __ERC721_init(_tokenName, _tokenSymbol);\r\n    _initializeEIP712(\"InsuranceNft\");\r\n  }\r\n\r\n  function getMaxBuyerFee() public view returns (uint256) {\r\n    return IDevParameters(pool.factory()).maxBuyerFee();\r\n  }\r\n\r\n  function getBuyerDevFee() public view returns (uint256) {\r\n    if (buyerDevFee == 10001) {\r\n      return IDevParameters(pool.factory()).buyerDevFee();\r\n    }\r\n    return buyerDevFee;\r\n  }\r\n\r\n  event UpdateBuyerDevFee(uint256 newFeeBps);\r\n  function updateBuyerDevFee(uint256 feeBps) public {\r\n    require(msg.sender == OwnableUpgradeable(pool.factory()).owner(), \"Not dev\");\r\n    // Limit to maxBuyerFee\r\n    require(feeBps <= getMaxBuyerFee() || feeBps == 10001, \"Invalid fee\");\r\n    buyerDevFee = feeBps;\r\n    emit UpdateBuyerDevFee(feeBps);\r\n  }\r\n\r\n  event SetOperator(address indexed operator, bool enabled);\r\n  function setOperator(address operator, bool enabled) public onlyOwner {\r\n    operators[operator] = enabled;\r\n    emit SetOperator(operator, enabled);\r\n  }\r\n\r\n  event BuyInsurance(address indexed payer, address indexed buyer, uint256 indexed tokenId, uint256 price, uint256 tokenExpiration, bytes message);\r\n  function buyInsurance(bytes calldata data, bytes memory message, bytes calldata signature) public {\r\n    (bytes32 typeHash, address to, uint256 price, uint256 tokenId, uint256 tokenExpirationValue, address referral, uint256 referralPercentage, uint256 expiration, bytes32 messageHash) = abi.decode(data, (bytes32, address, uint256, uint256, uint256, address, uint256, uint256, bytes32));\r\n\r\n    if (typeHash != BUY_TYPEHASH) revert InvalidTypeHash();\r\n    if (keccak256(message) != messageHash) revert InvalidMessageHash();\r\n    if (_exists(tokenId)) revert TokenIdUsed(tokenId);\r\n    if (block.timestamp > expiration) revert Expired(expiration);\r\n\r\n    address operator = ECDSA.recover(toTypedMessageHash(keccak256(data)), signature);\r\n\r\n    if (!operators[operator]) revert NotOperator(operator);\r\n\r\n    uint256 ownerFeeBps = pool.buyPercentageFee();\r\n    uint256 buyerDevFeeBps = getBuyerDevFee();\r\n    uint256 maxBuyerFeeBps = getMaxBuyerFee();\r\n\r\n    // if (buyerDevFeeBps + referralPercentage > getMaxBuyerFee()) revert TooMuchFee(buyerDevFeeBps + referralPercentage);\r\n    if (ownerFeeBps + buyerDevFeeBps + referralPercentage > maxBuyerFeeBps) {\r\n      referralPercentage = maxBuyerFeeBps - buyerDevFee - ownerFeeBps;\r\n    }\r\n\r\n    {\r\n      uint256 ownerFee = price * ownerFeeBps / 10000;\r\n      uint256 devFee = price * buyerDevFeeBps / 10000;\r\n      uint256 referralFee = price * referralPercentage / 10000;\r\n\r\n      baseToken.safeTransferFrom(msg.sender, pool.owner(), ownerFee);\r\n      baseToken.safeTransferFrom(msg.sender, OwnableUpgradeable(pool.factory()).owner(), devFee);\r\n      baseToken.safeTransferFrom(msg.sender, referral, referralFee);\r\n      baseToken.safeTransferFrom(msg.sender, address(pool), price - ownerFee - devFee - referralFee);\r\n      pool.distribute(price - ownerFee - devFee - referralFee);\r\n    }\r\n\r\n    _mint(to, tokenId);\r\n    tokenMessage[tokenId] = message;\r\n    tokenExpiration[tokenId] = tokenExpirationValue;\r\n    tokenReferralAddress[tokenId] = referral;\r\n    tokenReferralPercentage[tokenId] = referralPercentage;\r\n\r\n    emit BuyInsurance(msg.sender, to, tokenId, price, tokenExpirationValue, message);\r\n  }\r\n\r\n  event ExtendInsurance(address indexed payer, uint256 indexed tokenId, uint256 price, uint256 tokenExpiration, bytes message);\r\n  function extendInsurance(bytes calldata data, bytes memory message, bytes calldata signature) public {\r\n    (bytes32 typeHash, uint256 price, uint256 tokenId, uint256 nonce, uint256 tokenExpirationValue, uint256 expiration, bytes32 messageHash) = abi.decode(data, (bytes32, uint256, uint256, uint256, uint256, uint256, bytes32));\r\n\r\n    if (typeHash != EXTEND_TYPEHASH) revert InvalidTypeHash();\r\n    if (keccak256(message) != messageHash) revert InvalidMessageHash();\r\n    if (!_exists(tokenId)) revert TokenNotExists(tokenId);\r\n    if (block.timestamp > expiration) revert Expired(expiration);\r\n    if (tokenNonce[tokenId][nonce]) revert NonceReused(nonce);\r\n\r\n    address operator = ECDSA.recover(toTypedMessageHash(keccak256(data)), signature);\r\n\r\n    if (!operators[operator]) revert NotOperator(operator);\r\n\r\n    uint256 referralPercentage = tokenReferralPercentage[tokenId];\r\n\r\n    uint256 ownerFeeBps = pool.buyPercentageFee();\r\n    uint256 buyerDevFeeBps = getBuyerDevFee();\r\n    uint256 maxBuyerFeeBps = getMaxBuyerFee();\r\n\r\n    if (ownerFeeBps + buyerDevFeeBps + referralPercentage > maxBuyerFeeBps) {\r\n      referralPercentage = maxBuyerFeeBps - buyerDevFee - ownerFeeBps;\r\n    }\r\n\r\n    {\r\n      uint256 ownerFee = price * ownerFeeBps / 10000;\r\n      uint256 devFee = price * buyerDevFeeBps / 10000;\r\n      uint256 referralFee = price * referralPercentage / 10000;\r\n\r\n      baseToken.safeTransferFrom(msg.sender, pool.owner(), ownerFee);\r\n      baseToken.safeTransferFrom(msg.sender, OwnableUpgradeable(pool.factory()).owner(), devFee);\r\n      baseToken.safeTransferFrom(msg.sender, tokenReferralAddress[tokenId], referralFee);\r\n      baseToken.safeTransferFrom(msg.sender, address(pool), price - ownerFee - devFee - referralFee);\r\n      pool.distribute(price - ownerFee - devFee - referralFee);\r\n    }\r\n\r\n    tokenMessage[tokenId] = message;\r\n    if (tokenExpirationValue > tokenExpiration[tokenId]) {\r\n      tokenExpiration[tokenId] = tokenExpirationValue;\r\n    }\r\n\r\n    tokenNonce[tokenId][nonce] = true;\r\n\r\n    emit ExtendInsurance(msg.sender, tokenId, price, tokenExpirationValue, message);\r\n  }\r\n\r\n  event Claim(address indexed to, uint256 amount, bytes message);\r\n  function claim(bytes calldata data, bytes memory message, bytes calldata signature) public {\r\n    (bytes32 typeHash, address to, uint256 amount, uint256 tokenId, uint256 nonce, uint256 expiration, bytes32 messageHash) = abi.decode(data, (bytes32, address, uint256, uint256, uint256, uint256, bytes32));\r\n    \r\n    if (typeHash != CLAIM_TYPEHASH) revert InvalidTypeHash();\r\n    if (keccak256(message) != messageHash) revert InvalidMessageHash();\r\n\r\n    // Relax this condition in case user request for claim on last day\r\n    // if (block.timestamp > tokenExpiration[tokenId]) revert Expired(tokenExpiration[tokenId]);\r\n\r\n    if (block.timestamp > expiration) revert Expired(expiration);\r\n    if (tokenNonce[tokenId][nonce]) revert NonceReused(nonce);\r\n    \r\n    address operator = ECDSA.recover(toTypedMessageHash(keccak256(data)), signature);\r\n    if (!operators[operator]) revert NotOperator(operator);\r\n\r\n    pool.claim(to, amount);\r\n    tokenNonce[tokenId][nonce] = true;\r\n\r\n    emit Claim(to, amount, message);\r\n  }\r\n\r\n  function exists(uint256 tokenId) public view returns (bool) {\r\n    return _exists(tokenId);\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the name of the token.\r\n    */\r\n  function name() public override view virtual returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the symbol of the token, usually a shorter version of the\r\n    * name.\r\n    */\r\n  function symbol() public override view virtual returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) internal virtual override {\r\n    revert(\"Soulbound Token\");\r\n  }\r\n\r\n  /**\r\n    * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n    * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n    * by default, can be overridden in child contracts.\r\n    */\r\n  function _baseURI() internal view virtual override returns (string memory) {\r\n    return string.concat(\"https://insurance.838earth.finance/api/tokens/\", Strings.toHexString(uint256(uint160(msg.sender)), 20), \"/\");\r\n  }\r\n}"
    },
    "contracts/InsurancePool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IDistribute.sol\";\r\nimport \"./IDevParameters.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\nerror InvalidPercentage();\r\nerror Zero();\r\nerror Expired(uint256 expiration);\r\nerror NotExpired(uint256 expiration);\r\nerror DepositLimit();\r\nerror OutOfReserve();\r\nerror WithdrawBug();\r\n\r\ninterface INftInitializer {\r\n  function initialize(\r\n    address _pool,\r\n    IERC20 _baseToken,\r\n    string memory _tokenName,\r\n    string memory _tokenSymbol\r\n  ) external;\r\n}\r\n\r\ninterface IMasterchefInitializer is IDistribute {\r\n\tfunction initialize(\r\n    address _insurancePool,\r\n\t\taddress _baseToken\r\n\t) external;\r\n}\r\n\r\ncontract InsurancePool is ERC20Upgradeable, OwnableUpgradeable, IDistribute {\r\n  using SafeERC20 for IERC20;\r\n\r\n  address public immutable nftImplementation;\r\n  address public immutable masterchefImplementation;\r\n\r\n  IERC20 public baseToken;\r\n\r\n  address public factory;\r\n  address public nft;\r\n  IMasterchefInitializer public masterchef;\r\n\r\n  uint256 public rewardPerShare;\r\n  mapping(address => uint256) public rewardDebt; \r\n\r\n  uint256 public buyPercentageFee;\r\n  uint256 public depositPercentageFee;\r\n  uint256 public depositLimit;\r\n\r\n  uint256 public distributionRatio;\r\n  uint256 public masterchefRatio;\r\n\r\n  uint256 public expiration;\r\n\r\n  // This track profit of token stored in the insurance\r\n  int256 public keepProfit;\r\n\r\n  // in BPS unit\r\n  uint256 private investorDevFee;\r\n\r\n  uint256 public supplyAtExpired;\r\n\r\n  modifier onlyNft {\r\n    // TODO: HACKATHON only: Remove security for time trade off\r\n    // require(msg.sender == nft, \"Not NFT\");\r\n    _;\r\n  }\r\n\r\n  function isGovernance(address addr) public view returns(bool) {\r\n    return addr == owner() || addr == OwnableUpgradeable(factory).owner();\r\n  }\r\n\r\n  modifier onlyGovernance {\r\n    require(isGovernance(msg.sender), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address _nftImplementation,\r\n    address _masterchefImplementation\r\n  ) {\r\n    nftImplementation = _nftImplementation;\r\n    masterchefImplementation = _masterchefImplementation;\r\n  }\r\n\r\n  function getInvestorDevFee() public view returns(uint256) {\r\n    if (investorDevFee == 10001) {\r\n      return IDevParameters(factory).investorDevFee();\r\n    }\r\n    return investorDevFee;\r\n  }\r\n\r\n  event UpdateInvestorDevFee(uint256 newFeeBps);\r\n  function updateInvestorDevFee(uint256 feeBps) public {\r\n    require(msg.sender == OwnableUpgradeable(factory).owner(), \"Not dev\");\r\n    require(feeBps <= 10001, \"Invalid fee\");\r\n    investorDevFee = feeBps;\r\n    emit UpdateInvestorDevFee(feeBps);\r\n  }\r\n\r\n  event PoolInitialize(address indexed owner, address indexed nftContract, address indexed masterchefContract, uint256 expiration);\r\n  function initialize(\r\n    address _owner,\r\n    IERC20 _baseToken,\r\n    uint256 _buyPercentageFee,\r\n    uint256 _depositPercentageFee,\r\n    uint256 _depositLimit,\r\n    uint256 _distributionRatio,\r\n    uint256 _masterchefRatio,\r\n    uint256 _expiration,\r\n    string memory _tokenName,\r\n    string memory _tokenSymbol\r\n  ) external initializer {\r\n    if (!(_distributionRatio <= 10000 && _masterchefRatio <= 10000 && _depositPercentageFee <= 10000 && 10000 - _distributionRatio - _masterchefRatio >= 0)) {\r\n      revert InvalidPercentage();\r\n    }\r\n\r\n    investorDevFee = 10001;\r\n    \r\n    factory = msg.sender;\r\n\r\n    if (IDevParameters(factory).buyerDevFee() + _buyPercentageFee > IDevParameters(factory).maxBuyerFee()) {\r\n      revert InvalidPercentage();\r\n    }\r\n\r\n    nft = Clones.clone(nftImplementation);\r\n    INftInitializer(nft).initialize(address(this), _baseToken, _tokenName, _tokenSymbol);\r\n\r\n    masterchef = IMasterchefInitializer(Clones.clone(masterchefImplementation));\r\n    masterchef.initialize(address(this), address(_baseToken));\r\n\r\n    baseToken = _baseToken;\r\n\r\n    buyPercentageFee = _buyPercentageFee;\r\n    depositPercentageFee = _depositPercentageFee;\r\n    depositLimit = _depositLimit;\r\n\r\n    distributionRatio = _distributionRatio;\r\n    masterchefRatio = _masterchefRatio;\r\n\r\n    expiration = _expiration;\r\n\r\n    _transferOwnership(_owner);\r\n    __ERC20_init(_tokenName, _tokenSymbol);\r\n\r\n    emit PoolInitialize(_owner, address(nft), address(masterchef), _expiration);\r\n  }\r\n\r\n  function getParameters() public view returns(\r\n    address _owner,\r\n    IERC20 _baseToken,\r\n    uint256 _buyPercentageFee,\r\n    uint256 _depositPercentageFee,\r\n    uint256 _depositLimit,\r\n    uint256 _distributionRatio,\r\n    uint256 _masterchefRatio,\r\n    uint256 _expiration,\r\n    string memory _tokenName,\r\n    string memory _tokenSymbol\r\n  ) {\r\n    _owner = owner();\r\n    _baseToken = baseToken;\r\n    _buyPercentageFee = buyPercentageFee;\r\n    _depositPercentageFee = depositPercentageFee;\r\n    _depositLimit = depositLimit;\r\n    _distributionRatio = distributionRatio;\r\n    _masterchefRatio = masterchefRatio;\r\n    _expiration = expiration;\r\n    _tokenName = name();\r\n    _tokenSymbol = symbol();\r\n  }\r\n\r\n  event SetDepositLimit(uint256 newLimit);\r\n  function setDepositLimit(uint256 newLimit) public onlyGovernance {\r\n    depositLimit = newLimit;\r\n    emit SetDepositLimit(newLimit);\r\n  }\r\n\r\n  event SetBuyPercentageFee(uint256 newPercentageFee);\r\n  function setBuyPercentageFee(uint256 newPercentageFee) public onlyGovernance {\r\n    if (IDevParameters(factory).buyerDevFee() + newPercentageFee > IDevParameters(factory).maxBuyerFee()) {\r\n      revert InvalidPercentage();\r\n    }\r\n    buyPercentageFee = newPercentageFee;\r\n    emit SetBuyPercentageFee(newPercentageFee);\r\n  }\r\n\r\n  event SetDepositPercentageFee(uint256 newPercentageFee);\r\n  function setDepositPercentageFee(uint256 newPercentageFee) public onlyGovernance {\r\n    if (newPercentageFee > 10000) revert InvalidPercentage();\r\n    depositPercentageFee = newPercentageFee;\r\n    emit SetDepositPercentageFee(newPercentageFee);\r\n  }\r\n\r\n  event SetDistributionRatio(uint256 newRatio);\r\n  function setDistributionRatio(uint256 newRatio) public onlyGovernance {\r\n    if (newRatio > 10000) revert InvalidPercentage();\r\n    distributionRatio = newRatio;\r\n    emit SetDistributionRatio(newRatio);\r\n  }\r\n\r\n  event SetMasterchefRatio(uint256 newRatio);\r\n  function setMasterchefRatio(uint256 newRatio) public onlyGovernance {\r\n    if (newRatio > 10000) revert InvalidPercentage();\r\n    masterchefRatio = newRatio;\r\n    emit SetMasterchefRatio(newRatio);\r\n  }\r\n\r\n  function getPendingReward(address wallet) public view returns(uint256) {\r\n    uint256 rewardFromShare = rewardPerShare * balanceOf(wallet) / 1e18;\r\n    uint256 amount = rewardFromShare - rewardDebt[wallet];\r\n    return amount;\r\n  }\r\n\r\n  event Harvest(address to, uint256 amount);\r\n  function harvest(address to) public {\r\n    if (to != address(0)) {\r\n      uint256 rewardFromShare = rewardPerShare * balanceOf(to) / 1e18;\r\n      uint256 amount = rewardFromShare - rewardDebt[to];\r\n      baseToken.safeTransfer(to, amount);\r\n      rewardDebt[to] = rewardFromShare;\r\n      emit Harvest(to, amount);\r\n    }\r\n  }\r\n\r\n  event Deposit(address indexed payer, address indexed to, uint256 amount, uint256 fee);\r\n  function deposit(address to, uint256 amount) public {\r\n    if (amount == 0) revert Zero();\r\n    if (expiration != 0 && block.timestamp > expiration) revert Expired(expiration);\r\n\r\n    // Note: To pause deposit, set deposit limit to <= total supply but not zero\r\n    if (depositLimit != 0 && depositLimit + amount > totalSupply()) revert DepositLimit();\r\n\r\n    harvest(to);\r\n\r\n    baseToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n    uint256 fee = amount * depositPercentageFee * (10000 - getInvestorDevFee()) / 1e8;\r\n    uint256 devFee = amount * depositPercentageFee * getInvestorDevFee() / 1e8;\r\n\r\n    baseToken.safeTransfer(owner(), fee);\r\n    baseToken.safeTransfer(OwnableUpgradeable(factory).owner(), devFee);\r\n\r\n    _mint(to, amount - fee - devFee);\r\n\r\n    rewardDebt[to] = rewardPerShare * balanceOf(to) / 1e18;\r\n\r\n    emit Deposit(msg.sender, to, amount, fee);\r\n  }\r\n\r\n  event Distribute(uint256 amount, int256 keepProfit, uint256 rewardPerShare);\r\n  function distribute(uint256 amount) public onlyNft {\r\n    // NFT contract is responsible for transferring base amount\r\n\r\n    if (amount == 0) revert Zero();\r\n    if (expiration != 0 && block.timestamp > expiration) revert Expired(expiration);\r\n\r\n    uint256 distributeAmount = amount * distributionRatio / 10000;\r\n\r\n    keepProfit += int256(amount - distributeAmount);\r\n\r\n    if (masterchefRatio > 0) {\r\n      uint256 masterchefAmount = amount * masterchefRatio / 10000;\r\n      baseToken.safeTransfer(address(masterchef), masterchefAmount);\r\n      masterchef.distribute(masterchefAmount);\r\n      keepProfit -= int256(masterchefAmount);\r\n    }\r\n\r\n    if (totalSupply() == 0) {\r\n      // Refund distributeAmount back to the pool\r\n      keepProfit += int256(distributeAmount);\r\n    } else {\r\n      rewardPerShare += distributeAmount * 1e18 / totalSupply();\r\n    }\r\n\r\n    emit Distribute(amount, keepProfit, rewardPerShare);\r\n  }\r\n\r\n  event Claim(uint256 amount, int256 keepProfit);\r\n  function claim(address to, uint256 amount) public onlyNft {\r\n    if (amount == 0) revert Zero();\r\n    if (expiration != 0 && block.timestamp > expiration) revert Expired(expiration);\r\n\r\n    keepProfit -= int256(amount);\r\n    if (keepProfit < -int256(totalSupply())) revert OutOfReserve();\r\n    baseToken.safeTransfer(to, amount);\r\n    emit Claim(amount, keepProfit);\r\n  }\r\n\r\n  event Redeem(address indexed redeemer, uint256 amount, uint256 total);\r\n  function redeem(uint256 amount) public {\r\n    if (amount == 0) revert Zero();\r\n    // If no expiration -> can't redeem\r\n    if (expiration == 0 || block.timestamp <= expiration) revert NotExpired(expiration);\r\n\r\n    if (supplyAtExpired == 0) {\r\n      supplyAtExpired = totalSupply();\r\n    }\r\n\r\n    int256 supply = int256(supplyAtExpired);\r\n    int256 totalInt = (supply + keepProfit) * int256(amount) / supply;\r\n\r\n    if (totalInt <= 0) {\r\n      revert WithdrawBug();\r\n    }\r\n    \r\n    uint256 total = uint256(totalInt);\r\n\r\n    _burn(msg.sender, amount);\r\n    baseToken.safeTransfer(msg.sender, total);\r\n\r\n    emit Redeem(msg.sender, amount, total);\r\n  }\r\n\r\n  // Take loss but not take profit\r\n  event Withdraw(address indexed withdrawer, uint256 amount, uint256 total);\r\n  function withdraw(uint256 amount) public {\r\n    if (amount == 0) revert Zero();\r\n    // If expired -> use redeem instead\r\n    if (expiration != 0 && block.timestamp > expiration) revert Expired(expiration);\r\n\r\n    int256 supply = int256(totalSupply());\r\n    int256 totalInt = keepProfit >= 0 ? int256(amount) : (supply + keepProfit) * int256(amount) / supply;\r\n\r\n    if (totalInt <= 0) {\r\n      revert WithdrawBug();\r\n    }\r\n\r\n    keepProfit += int256(amount) - totalInt;\r\n\r\n    uint256 total = uint256(totalInt);\r\n\r\n    _burn(msg.sender, amount);\r\n    baseToken.safeTransfer(msg.sender, total);\r\n\r\n    emit Withdraw(msg.sender, amount, total);\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256\r\n  ) internal virtual override {\r\n    harvest(from);\r\n    harvest(to);\r\n  }\r\n\r\n  function _afterTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256\r\n  ) internal virtual override {\r\n    rewardDebt[from] = rewardPerShare * balanceOf(from) / 1e18;\r\n    rewardDebt[to] = rewardPerShare * balanceOf(to) / 1e18;\r\n  }\r\n}"
    },
    "contracts/meta-transactions/ContextMixin.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ContextMixin {\r\n    function msgSender() internal view returns (address sender) {\r\n        if (msg.sender == address(this)) {\r\n            bytes memory array = msg.data;\r\n            uint256 index = msg.data.length;\r\n            assembly {\r\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\r\n                sender := and(\r\n                    mload(add(array, index)),\r\n                    0xffffffffffffffffffffffffffffffffffffffff\r\n                )\r\n            }\r\n        } else {\r\n            sender = msg.sender;\r\n        }\r\n        return sender;\r\n    }\r\n}\r\n"
    },
    "contracts/meta-transactions/EIP712Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\ncontract EIP712Base is Initializable {\r\n    struct EIP712Domain {\r\n        string name;\r\n        string version;\r\n        address verifyingContract;\r\n        bytes32 salt;\r\n    }\r\n\r\n    string constant public ERC712_VERSION = \"1\";\r\n\r\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\r\n        bytes(\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        )\r\n    );\r\n    bytes32 internal domainSeperator;\r\n\r\n    // supposed to be called once while initializing.\r\n    // one of the contracts that inherits this contract follows proxy pattern\r\n    // so it is not possible to do this in a constructor\r\n    function _initializeEIP712(\r\n        string memory name\r\n    )\r\n        internal\r\n        onlyInitializing\r\n    {\r\n        _setDomainSeperator(name);\r\n    }\r\n\r\n    function _setDomainSeperator(string memory name) internal {\r\n        domainSeperator = keccak256(\r\n            abi.encode(\r\n                EIP712_DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(ERC712_VERSION)),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function getDomainSeperator() public view returns (bytes32) {\r\n        return domainSeperator;\r\n    }\r\n\r\n    function getChainId() public view returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Accept message hash and returns hash message in EIP712 compatible form\r\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\r\n     * https://eips.ethereum.org/EIPS/eip-712\r\n     * \"\\\\x19\" makes the encoding deterministic\r\n     * \"\\\\x01\" is the version byte to make it compatible to EIP-191\r\n     */\r\n    function toTypedMessageHash(bytes32 messageHash)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\"\\x19\\x01\", getDomainSeperator(), messageHash)\r\n            );\r\n    }\r\n}"
    },
    "contracts/optidomains/AttestationStation.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\n/**\r\n * @title Semver\r\n * @notice Semver is a simple contract for managing contract versions.\r\n */\r\ncontract Semver {\r\n    /**\r\n     * @notice Contract version number (major).\r\n     */\r\n    uint256 private immutable MAJOR_VERSION;\r\n\r\n    /**\r\n     * @notice Contract version number (minor).\r\n     */\r\n    uint256 private immutable MINOR_VERSION;\r\n\r\n    /**\r\n     * @notice Contract version number (patch).\r\n     */\r\n    uint256 private immutable PATCH_VERSION;\r\n\r\n    /**\r\n     * @param _major Version number (major).\r\n     * @param _minor Version number (minor).\r\n     * @param _patch Version number (patch).\r\n     */\r\n    constructor(\r\n        uint256 _major,\r\n        uint256 _minor,\r\n        uint256 _patch\r\n    ) {\r\n        MAJOR_VERSION = _major;\r\n        MINOR_VERSION = _minor;\r\n        PATCH_VERSION = _patch;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the full semver contract version.\r\n     *\r\n     * @return Semver contract version as a string.\r\n     */\r\n    function version() public view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    Strings.toString(MAJOR_VERSION),\r\n                    \".\",\r\n                    Strings.toString(MINOR_VERSION),\r\n                    \".\",\r\n                    Strings.toString(PATCH_VERSION)\r\n                )\r\n            );\r\n    }\r\n}\r\n\r\n/**\r\n * @title AttestationStation\r\n * @author Optimism Collective\r\n * @author Gitcoin\r\n * @notice Where attestations live.\r\n */\r\ncontract AttestationStation is Semver {\r\n    /**\r\n     * @notice Struct representing data that is being attested.\r\n     *\r\n     * @custom:field about Address for which the attestation is about.\r\n     * @custom:field key   A bytes32 key for the attestation.\r\n     * @custom:field val   The attestation as arbitrary bytes.\r\n     */\r\n    struct AttestationData {\r\n        address about;\r\n        bytes32 key;\r\n        bytes val;\r\n    }\r\n\r\n    /**\r\n     * @notice Maps addresses to attestations. Creator => About => Key => Value.\r\n     */\r\n    mapping(address => mapping(address => mapping(bytes32 => bytes))) public attestations;\r\n\r\n    /**\r\n     * @notice Emitted when Attestation is created.\r\n     *\r\n     * @param creator Address that made the attestation.\r\n     * @param about   Address attestation is about.\r\n     * @param key     Key of the attestation.\r\n     * @param val     Value of the attestation.\r\n     */\r\n    event AttestationCreated(\r\n        address indexed creator,\r\n        address indexed about,\r\n        bytes32 indexed key,\r\n        bytes val\r\n    );\r\n\r\n    /**\r\n     * @custom:semver 1.1.0\r\n     */\r\n    constructor() Semver(1, 1, 0) {}\r\n\r\n    /**\r\n     * @notice Allows anyone to create an attestation.\r\n     *\r\n     * @param _about Address that the attestation is about.\r\n     * @param _key   A key used to namespace the attestation.\r\n     * @param _val   An arbitrary value stored as part of the attestation.\r\n     */\r\n    function attest(\r\n        address _about,\r\n        bytes32 _key,\r\n        bytes memory _val\r\n    ) public {\r\n        attestations[msg.sender][_about][_key] = _val;\r\n\r\n        emit AttestationCreated(msg.sender, _about, _key, _val);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows anyone to create attestations.\r\n     *\r\n     * @param _attestations An array of attestation data.\r\n     */\r\n    function attest(AttestationData[] calldata _attestations) external {\r\n        uint256 length = _attestations.length;\r\n        for (uint256 i = 0; i < length; ) {\r\n            AttestationData memory attestation = _attestations[i];\r\n\r\n            attest(attestation.about, attestation.key, attestation.val);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}"
    },
    "contracts/optidomains/DiamondResolverUtil.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.8;\r\n\r\nimport {OwnableStorage} from \"@solidstate/contracts/access/ownable/OwnableStorage.sol\";\r\nimport \"./INameWrapperRegistry.sol\";\r\nimport \"./OptiDomainsAttestation.sol\";\r\n\r\nerror NotDiamondOwner();\r\n\r\ninterface IVersionableResolver {\r\n    // event VersionChanged(bytes32 indexed node, uint64 newVersion);\r\n\r\n    function recordVersions(bytes32 node) external view returns (uint64);\r\n    function clearRecords(bytes32 node) external;\r\n}\r\n\r\n/**\r\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\r\n */\r\nlibrary DiamondBaseStorage {\r\n    struct Layout {\r\n        // function selector => (facet address, selector slot position)\r\n        mapping(bytes4 => bytes32) facets;\r\n        // total number of selectors registered\r\n        uint16 selectorCount;\r\n        // array of selector slots with 8 selectors per slot\r\n        mapping(uint256 => bytes32) selectorSlots;\r\n        address fallbackAddress;\r\n    }\r\n\r\n    bytes32 internal constant STORAGE_SLOT =\r\n        keccak256('solidstate.contracts.storage.DiamondBase');\r\n\r\n    function layout() internal pure returns (Layout storage l) {\r\n        bytes32 slot = STORAGE_SLOT;\r\n        assembly {\r\n            l.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract DiamondResolverUtil {\r\n    error Unauthorised();\r\n\r\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\r\n\r\n    modifier baseOnlyOwner() {\r\n        if (msg.sender != OwnableStorage.layout().owner) revert NotDiamondOwner();\r\n        _;\r\n    }\r\n\r\n    function _registry() internal view returns(INameWrapperRegistry) {\r\n        return IHasNameWrapperRegistry(address(this)).registry();\r\n    }\r\n\r\n    function _attestation() internal view returns(OptiDomainsAttestation) {\r\n        return OptiDomainsAttestation(_registry().attestation());\r\n    }\r\n\r\n    function _readAttestation(bytes32 node, bytes32 key) internal view returns(bytes memory) {\r\n        return _attestation().readAttestation(node, key);\r\n    }\r\n\r\n    function _attest(bytes32 node, bytes32 key, bytes memory value) internal {\r\n        _attestation().attest(node, key, value);\r\n    }\r\n\r\n    function _recordVersions(bytes32 node) internal view returns (uint64) {\r\n        return _attestation().readVersion(node);\r\n    }\r\n\r\n    /**\r\n     * Increments the record version associated with an ENS node.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param node The node to update.\r\n     */\r\n    function _clearRecords(bytes32 node) internal virtual {\r\n        _attestation().increaseVersion(node);\r\n        emit VersionChanged(node, _recordVersions(node));\r\n    }\r\n\r\n    function _isAuthorised(bytes32 node) internal view returns (bool) {\r\n        (bool success, bytes memory result) = address(this).staticcall(\r\n            abi.encodeWithSelector(0x25f36704, msg.sender, node)\r\n        );\r\n        if (!success) return false;\r\n        return abi.decode(result, (bool));\r\n    }\r\n\r\n    modifier authorised(bytes32 node) {\r\n        if (!_isAuthorised(node)) revert Unauthorised();\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/optidomains/ENS.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.4;\r\n\r\ninterface ENS {\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n    // Logged when an operator is added or removed.\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function setRecord(\r\n        bytes32 node,\r\n        address owner,\r\n        address resolver,\r\n        uint64 ttl\r\n    ) external;\r\n\r\n    function setSubnodeRecord(\r\n        bytes32 node,\r\n        bytes32 label,\r\n        address owner,\r\n        address resolver,\r\n        uint64 ttl\r\n    ) external;\r\n\r\n    function setSubnodeOwner(\r\n        bytes32 node,\r\n        bytes32 label,\r\n        address owner\r\n    ) external returns (bytes32);\r\n\r\n    function setResolver(bytes32 node, address resolver) external;\r\n\r\n    function setOwner(bytes32 node, address owner) external;\r\n\r\n    function setTTL(bytes32 node, uint64 ttl) external;\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function owner(bytes32 node) external view returns (address);\r\n\r\n    function resolver(bytes32 node) external view returns (address);\r\n\r\n    function ttl(bytes32 node) external view returns (uint64);\r\n\r\n    function recordExists(bytes32 node) external view returns (bool);\r\n\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    ) external view returns (bool);\r\n}\r\n"
    },
    "contracts/optidomains/ENSRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.4;\r\n\r\nimport \"./ENS.sol\";\r\n\r\n/**\r\n * The ENS registry contract.\r\n */\r\ncontract ENSRegistry is ENS {\r\n    struct Record {\r\n        address owner;\r\n        address resolver;\r\n        uint64 ttl;\r\n    }\r\n\r\n    mapping(bytes32 => Record) records;\r\n    mapping(address => mapping(address => bool)) operators;\r\n\r\n    // Permits modifications only by the owner of the specified node.\r\n    modifier authorised(bytes32 node) {\r\n        address owner = records[node].owner;\r\n        require(owner == msg.sender || operators[owner][msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructs a new ENS registry.\r\n     */\r\n    constructor(address _owner) {\r\n        records[0x0].owner = _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the record for a node.\r\n     * @param node The node to update.\r\n     * @param owner The address of the new owner.\r\n     * @param resolver The address of the resolver.\r\n     * @param ttl The TTL in seconds.\r\n     */\r\n    function setRecord(\r\n        bytes32 node,\r\n        address owner,\r\n        address resolver,\r\n        uint64 ttl\r\n    ) external virtual override {\r\n        setOwner(node, owner);\r\n        _setResolverAndTTL(node, resolver, ttl);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the record for a subnode.\r\n     * @param node The parent node.\r\n     * @param label The hash of the label specifying the subnode.\r\n     * @param owner The address of the new owner.\r\n     * @param resolver The address of the resolver.\r\n     * @param ttl The TTL in seconds.\r\n     */\r\n    function setSubnodeRecord(\r\n        bytes32 node,\r\n        bytes32 label,\r\n        address owner,\r\n        address resolver,\r\n        uint64 ttl\r\n    ) external virtual override {\r\n        bytes32 subnode = setSubnodeOwner(node, label, owner);\r\n        _setResolverAndTTL(subnode, resolver, ttl);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of a node to a new address. May only be called by the current owner of the node.\r\n     * @param node The node to transfer ownership of.\r\n     * @param owner The address of the new owner.\r\n     */\r\n    function setOwner(\r\n        bytes32 node,\r\n        address owner\r\n    ) public virtual override authorised(node) {\r\n        _setOwner(node, owner);\r\n        emit Transfer(node, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\r\n     * @param node The parent node.\r\n     * @param label The hash of the label specifying the subnode.\r\n     * @param owner The address of the new owner.\r\n     */\r\n    function setSubnodeOwner(\r\n        bytes32 node,\r\n        bytes32 label,\r\n        address owner\r\n    ) public virtual override authorised(node) returns (bytes32) {\r\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\r\n        _setOwner(subnode, owner);\r\n        emit NewOwner(node, label, owner);\r\n        return subnode;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the resolver address for the specified node.\r\n     * @param node The node to update.\r\n     * @param resolver The address of the resolver.\r\n     */\r\n    function setResolver(\r\n        bytes32 node,\r\n        address resolver\r\n    ) public virtual override authorised(node) {\r\n        emit NewResolver(node, resolver);\r\n        records[node].resolver = resolver;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the TTL for the specified node.\r\n     * @param node The node to update.\r\n     * @param ttl The TTL in seconds.\r\n     */\r\n    function setTTL(\r\n        bytes32 node,\r\n        uint64 ttl\r\n    ) public virtual override authorised(node) {\r\n        emit NewTTL(node, ttl);\r\n        records[node].ttl = ttl;\r\n    }\r\n\r\n    /**\r\n     * @dev Enable or disable approval for a third party (\"operator\") to manage\r\n     *  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.\r\n     * @param operator Address to add to the set of authorized operators.\r\n     * @param approved True if the operator is approved, false to revoke approval.\r\n     */\r\n    function setApprovalForAll(\r\n        address operator,\r\n        bool approved\r\n    ) external virtual override {\r\n        operators[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that owns the specified node.\r\n     * @param node The specified node.\r\n     * @return address of the owner.\r\n     */\r\n    function owner(\r\n        bytes32 node\r\n    ) public view virtual override returns (address) {\r\n        address addr = records[node].owner;\r\n        if (addr == address(this)) {\r\n            return address(0x0);\r\n        }\r\n\r\n        return addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the resolver for the specified node.\r\n     * @param node The specified node.\r\n     * @return address of the resolver.\r\n     */\r\n    function resolver(\r\n        bytes32 node\r\n    ) public view virtual override returns (address) {\r\n        return records[node].resolver;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the TTL of a node, and any records associated with it.\r\n     * @param node The specified node.\r\n     * @return ttl of the node.\r\n     */\r\n    function ttl(bytes32 node) public view virtual override returns (uint64) {\r\n        return records[node].ttl;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a record has been imported to the registry.\r\n     * @param node The specified node.\r\n     * @return Bool if record exists\r\n     */\r\n    function recordExists(\r\n        bytes32 node\r\n    ) public view virtual override returns (bool) {\r\n        return records[node].owner != address(0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Query if an address is an authorized operator for another address.\r\n     * @param owner The address that owns the records.\r\n     * @param operator The address that acts on behalf of the owner.\r\n     * @return True if `operator` is an approved operator for `owner`, false otherwise.\r\n     */\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    ) external view virtual override returns (bool) {\r\n        return operators[owner][operator];\r\n    }\r\n\r\n    function _setOwner(bytes32 node, address owner) internal virtual {\r\n        records[node].owner = owner;\r\n    }\r\n\r\n    function _setResolverAndTTL(\r\n        bytes32 node,\r\n        address resolver,\r\n        uint64 ttl\r\n    ) internal {\r\n        if (resolver != records[node].resolver) {\r\n            records[node].resolver = resolver;\r\n            emit NewResolver(node, resolver);\r\n        }\r\n\r\n        if (ttl != records[node].ttl) {\r\n            records[node].ttl = ttl;\r\n            emit NewTTL(node, ttl);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/optidomains/INameWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\ninterface INameWrapper is IERC1155 {\r\n    event NameWrapped(\r\n        bytes32 indexed node,\r\n        bytes name,\r\n        address owner,\r\n        uint32 fuses,\r\n        uint64 expiry\r\n    );\r\n\r\n    event NameUnwrapped(bytes32 indexed node, address owner);\r\n\r\n    event FusesSet(bytes32 indexed node, uint32 fuses);\r\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\r\n\r\n    function ens() external view returns (address);\r\n\r\n    function registrar() external view returns (address);\r\n\r\n    function metadataService() external view returns (address);\r\n\r\n    function names(bytes32) external view returns (bytes memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function upgradeContract() external view returns (address);\r\n\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n\r\n    function wrap(\r\n        bytes calldata name,\r\n        address wrappedOwner,\r\n        address resolver\r\n    ) external;\r\n\r\n    function wrapETH2LD(\r\n        string calldata label,\r\n        address wrappedOwner,\r\n        uint16 ownerControlledFuses,\r\n        address resolver\r\n    ) external returns (uint64 expires);\r\n\r\n    function registerAndWrapETH2LD(\r\n        string calldata label,\r\n        address wrappedOwner,\r\n        uint256 duration,\r\n        address resolver,\r\n        uint16 ownerControlledFuses\r\n    ) external returns (uint256 registrarExpiry);\r\n\r\n    function renew(\r\n        uint256 labelHash,\r\n        uint256 duration\r\n    ) external returns (uint256 expires);\r\n\r\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\r\n\r\n    function unwrapETH2LD(\r\n        bytes32 label,\r\n        address newRegistrant,\r\n        address newController\r\n    ) external;\r\n\r\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\r\n\r\n    function setFuses(\r\n        bytes32 node,\r\n        uint16 ownerControlledFuses\r\n    ) external returns (uint32 newFuses);\r\n\r\n    function setChildFuses(\r\n        bytes32 parentNode,\r\n        bytes32 labelhash,\r\n        uint32 fuses,\r\n        uint64 expiry\r\n    ) external;\r\n\r\n    function setSubnodeRecord(\r\n        bytes32 node,\r\n        string calldata label,\r\n        address owner,\r\n        address resolver,\r\n        uint64 ttl,\r\n        uint32 fuses,\r\n        uint64 expiry\r\n    ) external returns (bytes32);\r\n\r\n    function setRecord(\r\n        bytes32 node,\r\n        address owner,\r\n        address resolver,\r\n        uint64 ttl\r\n    ) external;\r\n\r\n    function setSubnodeOwner(\r\n        bytes32 node,\r\n        string calldata label,\r\n        address newOwner,\r\n        uint32 fuses,\r\n        uint64 expiry\r\n    ) external returns (bytes32);\r\n\r\n    function extendExpiry(\r\n        bytes32 node,\r\n        bytes32 labelhash,\r\n        uint64 expiry\r\n    ) external returns (uint64);\r\n\r\n    function canModifyName(\r\n        bytes32 node,\r\n        address addr\r\n    ) external view returns (bool);\r\n\r\n    function setResolver(bytes32 node, address resolver) external;\r\n\r\n    function setTTL(bytes32 node, uint64 ttl) external;\r\n\r\n    function ownerOf(uint256 id) external view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address);\r\n\r\n    function getData(\r\n        uint256 id\r\n    ) external view returns (address, uint32, uint64);\r\n\r\n    function setMetadataService(address _metadataService) external;\r\n\r\n    function uri(uint256 tokenId) external view returns (string memory);\r\n\r\n    function setUpgradeContract(address _upgradeAddress) external;\r\n\r\n    function allFusesBurned(\r\n        bytes32 node,\r\n        uint32 fuseMask\r\n    ) external view returns (bool);\r\n\r\n    function isWrapped(bytes32) external view returns (bool);\r\n\r\n    function isWrapped(bytes32, bytes32) external view returns (bool);\r\n}"
    },
    "contracts/optidomains/INameWrapperRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.17 <0.9.0;\r\n\r\nimport {ENS} from \"./ENS.sol\";\r\nimport {INameWrapper} from \"./INameWrapper.sol\";\r\n\r\ninterface INameWrapperRegistry {\r\n  function ens() external view returns(ENS);\r\n  function attestation() external view returns(address);\r\n  function forward(INameWrapper wrapper) external view returns(INameWrapper);\r\n  function backward(INameWrapper wrapper) external view returns(INameWrapper);\r\n  function isNameWrapper(address wrapper) external view returns(bool);\r\n  function ownerOf(bytes32 node) external view returns(address);\r\n\r\n  function upgrade(INameWrapper _old, INameWrapper _new) external;\r\n  function setAttestation(address _attestation) external;\r\n}\r\n\r\ninterface IHasNameWrapperRegistry {\r\n  function registry() external view returns(INameWrapperRegistry);\r\n}"
    },
    "contracts/optidomains/IOptiDomainsAttestation.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\nimport \"./AttestationStation.sol\";\r\nimport \"./INameWrapperRegistry.sol\";\r\n\r\ninterface IOptiDomainsAttestation {\r\n  function registry() external view returns(INameWrapperRegistry);\r\n  function attestationStation() external view returns(AttestationStation);\r\n  function attestationActivated() external view returns(bool);\r\n\r\n  function readVersion(bytes32 node) external view returns(uint64);\r\n  function readAttestation(address creator, bytes32 node, bytes32 key) external view returns(bytes memory);\r\n  function readAttestation(bytes32 node, bytes32 key) external view returns(bytes memory);\r\n  function readAttestationNV(address creator, bytes32 node, bytes32 key) external view returns(bytes memory);\r\n\r\n  function buildAttestationData(bytes32 node, bytes32 key, uint256 flags, bytes memory value) external view returns(AttestationStation.AttestationData[] memory att);\r\n  function attest(bytes32 node, bytes32 key, bytes memory value) external;\r\n  function increaseVersion(bytes32 node) external;\r\n}"
    },
    "contracts/optidomains/NameWrapperRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.17 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"./INameWrapperRegistry.sol\";\r\n\r\ncontract NameWrapperRegistry is INameWrapperRegistry, Ownable, IERC165 {\r\n    ENS public immutable ens;\r\n    address public attestation;\r\n    mapping(address => bool) public isNameWrapper;\r\n    mapping(INameWrapper => INameWrapper) public forward;\r\n    mapping(INameWrapper => INameWrapper) public backward;\r\n\r\n    constructor(ENS _ens) {\r\n        ens = _ens;\r\n    }\r\n\r\n    event NameWrapperUpgraded(\r\n        address indexed oldNameWrapper,\r\n        address indexed newNameWrapper\r\n    );\r\n\r\n    function upgrade(INameWrapper _old, INameWrapper _new) external onlyOwner {\r\n        require(\r\n            _new.supportsInterface(type(INameWrapper).interfaceId),\r\n            \"New Not NameWrapper\"\r\n        );\r\n\r\n        if (address(_old) == address(0)) {\r\n            isNameWrapper[address(_new)] = true;\r\n        } else {\r\n            require(isNameWrapper[address(_old)], \"Old Not NameWrapper\");\r\n\r\n            if (forward[_old] != INameWrapper(address(0))) {\r\n                delete forward[forward[_old]];\r\n                delete backward[forward[_old]];\r\n            }\r\n\r\n            forward[_old] = _new;\r\n            backward[_new] = _old;\r\n\r\n            isNameWrapper[address(_new)] = true;\r\n        }\r\n\r\n        emit NameWrapperUpgraded(address(_old), address(_new));\r\n    }\r\n\r\n    event SetAttestation(address indexed attestation);\r\n    function setAttestation(address _attestation) external onlyOwner {\r\n        attestation = _attestation;\r\n        emit SetAttestation(attestation);\r\n    }\r\n\r\n    function ownerOf(bytes32 node) public view returns(address owner) {\r\n        owner = ens.owner(node);\r\n        if (isNameWrapper[owner]) {\r\n            owner = INameWrapper(owner).ownerOf(uint256(node));\r\n        }\r\n    }\r\n\r\n    function supportsInterface(\r\n        bytes4 interfaceID\r\n    ) public view virtual override(IERC165) returns (bool) {\r\n        return interfaceID == type(INameWrapperRegistry).interfaceId;\r\n    }\r\n}\r\n"
    },
    "contracts/optidomains/OptiDomainsAttestation.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\nimport {INameWrapperRegistry} from \"./INameWrapperRegistry.sol\";\r\nimport \"./AttestationStation.sol\";\r\n\r\nbytes32 constant VERSION_KEY = keccak256(\"optidomains.resolver.VersionStorage\");\r\n\r\nerror NotResolver(address caller, address resolver);\r\n\r\ncontract OptiDomainsAttestation {\r\n    INameWrapperRegistry public immutable registry;\r\n    AttestationStation public immutable attestationStation;\r\n    bool public attestationActivated;\r\n\r\n    // In case attestation is not created -> simulate it in this contract\r\n\r\n    /**\r\n     * @notice Maps addresses to attestations. Creator => About => Key => Value.\r\n     */\r\n    mapping(address => mapping(address => mapping(bytes32 => bytes)))\r\n        public attestations;\r\n\r\n    /**\r\n     * @notice Emitted when Attestation is created.\r\n     *\r\n     * @param creator Address that made the attestation.\r\n     * @param about   Address attestation is about.\r\n     * @param key     Key of the attestation.\r\n     * @param val     Value of the attestation.\r\n     */\r\n    event AttestationCreated(\r\n        address indexed creator,\r\n        address indexed about,\r\n        bytes32 indexed key,\r\n        bytes val\r\n    );\r\n\r\n    function _attestLocal(address _about, bytes32 _key, bytes memory _val) internal {\r\n        attestations[address(this)][_about][_key] = _val;\r\n        emit AttestationCreated(address(this), _about, _key, _val);\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    constructor(\r\n        INameWrapperRegistry _registry,\r\n        AttestationStation _attestationStation\r\n    ) {\r\n        registry = _registry;\r\n        attestationStation = _attestationStation;\r\n        attestationActivated = isContract(address(_attestationStation));\r\n    }\r\n\r\n    function activate() public {\r\n        attestationActivated = isContract(address(attestationStation));\r\n    }\r\n\r\n    function _attest(AttestationStation.AttestationData[] memory _attestations) internal {\r\n        if (attestationActivated) {\r\n            attestationStation.attest(_attestations);\r\n        } else {\r\n            uint256 length = _attestations.length;\r\n            for (uint256 i = 0; i < length; ) {\r\n                AttestationStation.AttestationData memory attestation = _attestations[i];\r\n\r\n                _attestLocal(attestation.about, attestation.key, attestation.val);\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _readAttestation(address creator, address about, bytes32 key) public view returns(bytes memory) {\r\n        if (attestationActivated) {\r\n            return attestationStation.attestations(creator, about, key);\r\n        } else {\r\n            return attestations[creator][about][key];\r\n        }\r\n    }\r\n\r\n    function _readVersion(address owner, bytes32 node) internal view returns(uint64) {\r\n        bytes memory response = _readAttestation(address(this), owner, keccak256(abi.encodePacked(node, VERSION_KEY)));\r\n        if (response.length == 0) return 0;\r\n        return abi.decode(response, (uint64));\r\n    }\r\n\r\n    function readVersion(bytes32 node) public view returns(uint64) {\r\n        return _readVersion(registry.ownerOf(node), node);\r\n    }\r\n\r\n    function readAttestation(address creator, bytes32 node, bytes32 key) public view returns(bytes memory) {\r\n        address owner = registry.ownerOf(node);\r\n        uint64 version = _readVersion(owner, node);\r\n        return _readAttestation(creator, owner, keccak256(abi.encodePacked(node, key, version)));\r\n    }\r\n\r\n    function readAttestation(bytes32 node, bytes32 key) public view returns(bytes memory) {\r\n        return readAttestation(address(this), node, key);\r\n    }\r\n\r\n    function readAttestationNV(address creator, bytes32 node, bytes32 key) public view returns(bytes memory) {\r\n        address owner = registry.ownerOf(node);\r\n        return _readAttestation(creator, owner, keccak256(abi.encodePacked(node, key)));\r\n    }\r\n\r\n    // External attestor\r\n    function buildAttestationData(bytes32 node, bytes32 key, uint256 flags, bytes memory value) public view returns(AttestationStation.AttestationData[] memory att) {\r\n        address owner = registry.ownerOf(node);\r\n\r\n        require(flags > 0 && flags < 8, \"Invalid flags\");\r\n\r\n        bool useOwner = (flags & 1) > 0;\r\n        bool useVersion = (flags & 2) > 0;\r\n        bool useNodeOnly = (flags % 4) > 0;\r\n\r\n        uint256 length;\r\n\r\n        assembly {\r\n            // SAFETY: Simple bool-to-int cast.\r\n            length := add(add(useOwner, useVersion), useNodeOnly)\r\n        }\r\n        \r\n        att = new AttestationStation.AttestationData[](length);\r\n\r\n        uint256 i = 0;\r\n\r\n        if (useOwner) {\r\n            att[i++] = AttestationStation.AttestationData({\r\n                about: owner,\r\n                key: keccak256(abi.encodePacked(node, key)),\r\n                val: value\r\n            });\r\n        }\r\n\r\n        if (useVersion) {\r\n            uint64 version = _readVersion(owner, node);\r\n\r\n            att[i++] = AttestationStation.AttestationData({\r\n                about: owner,\r\n                key: keccak256(abi.encodePacked(node, key, version)),\r\n                val: value\r\n            });\r\n        }\r\n\r\n        if (useNodeOnly) {\r\n            att[i++] = AttestationStation.AttestationData({\r\n                about: address(0),\r\n                key: keccak256(abi.encodePacked(node, key)),\r\n                val: value\r\n            });\r\n        }\r\n    }\r\n\r\n    // Attest by resolver\r\n    function attest(bytes32 node, bytes32 key, bytes memory value) public {\r\n        address resolver = registry.ens().resolver(node);\r\n        if (msg.sender != resolver) {\r\n            revert NotResolver(msg.sender, resolver);\r\n        }\r\n\r\n        address owner = registry.ownerOf(node);\r\n        uint64 version = _readVersion(owner, node);\r\n\r\n        // AttestationStation.AttestationData[] memory att = buildAttestationData(node, key, 3, value);\r\n\r\n        AttestationStation.AttestationData[] memory att = new AttestationStation.AttestationData[](2);\r\n        \r\n        att[0] = AttestationStation.AttestationData({\r\n            about: owner,\r\n            key: keccak256(abi.encodePacked(node, key)),\r\n            val: value\r\n        });\r\n\r\n        att[1] = AttestationStation.AttestationData({\r\n            about: owner,\r\n            key: keccak256(abi.encodePacked(node, key, version)),\r\n            val: value\r\n        });\r\n\r\n        _attest(att);\r\n    }\r\n\r\n    // Increase version by resolver\r\n    function increaseVersion(bytes32 node) public {\r\n        address resolver = registry.ens().resolver(node);\r\n        if (msg.sender != resolver) {\r\n            revert NotResolver(msg.sender, resolver);\r\n        }\r\n\r\n        address owner = registry.ownerOf(node);\r\n        uint64 version = _readVersion(owner, node);\r\n\r\n        AttestationStation.AttestationData[] memory att = new AttestationStation.AttestationData[](1);\r\n        \r\n        att[0] = AttestationStation.AttestationData({\r\n            about: owner,\r\n            key: keccak256(abi.encodePacked(node, VERSION_KEY)),\r\n            val: abi.encode(version + 1)\r\n        });\r\n\r\n        _attest(att);\r\n    }\r\n}\r\n"
    },
    "contracts/test/EIP1271Wallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\ninterface ERC20ApprovalInterface {\r\n    function approve(address, uint256) external returns (bool);\r\n}\r\n\r\ninterface NFTApprovalInterface {\r\n    function setApprovalForAll(address, bool) external;\r\n}\r\n\r\ncontract EIP1271Wallet {\r\n    bytes4 private constant _EIP_1271_MAGIC_VALUE = 0x1626ba7e;\r\n\r\n    address public immutable owner;\r\n\r\n    bool public showRevertMessage;\r\n\r\n    mapping(bytes32 => bool) public digestApproved;\r\n\r\n    bool public isValid;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        showRevertMessage = true;\r\n        isValid = true;\r\n    }\r\n\r\n    function setValid(bool valid) external {\r\n        isValid = valid;\r\n    }\r\n\r\n    function revertWithMessage(bool showMessage) external {\r\n        showRevertMessage = showMessage;\r\n    }\r\n\r\n    function registerDigest(bytes32 digest, bool approved) external {\r\n        digestApproved[digest] = approved;\r\n    }\r\n\r\n    function approveERC20(\r\n        ERC20ApprovalInterface token,\r\n        address operator,\r\n        uint256 amount\r\n    ) external {\r\n        if (msg.sender != owner) {\r\n            revert(\"Only owner\");\r\n        }\r\n\r\n        token.approve(operator, amount);\r\n    }\r\n\r\n    function approveNFT(NFTApprovalInterface token, address operator) external {\r\n        if (msg.sender != owner) {\r\n            revert(\"Only owner\");\r\n        }\r\n\r\n        token.setApprovalForAll(operator, true);\r\n    }\r\n\r\n    function isValidSignature(bytes32 digest, bytes memory signature)\r\n        external\r\n        view\r\n        returns (bytes4)\r\n    {\r\n        if (digestApproved[digest]) {\r\n            return _EIP_1271_MAGIC_VALUE;\r\n        }\r\n\r\n        if (signature.length != 65) {\r\n            revert();\r\n        }\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        if (\r\n            uint256(s) >\r\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\r\n        ) {\r\n            revert();\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert();\r\n        }\r\n\r\n        address signer = ecrecover(digest, v, r, s);\r\n\r\n        if (signer == address(0)) {\r\n            revert();\r\n        }\r\n\r\n        if (signer != owner) {\r\n            if (showRevertMessage) {\r\n                revert(\"BAD SIGNER\");\r\n            }\r\n\r\n            revert();\r\n        }\r\n\r\n        return isValid ? _EIP_1271_MAGIC_VALUE : bytes4(0xffffffff);\r\n    }\r\n}\r\n"
    },
    "contracts/test/ERC1155BatchRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\ncontract ERC1155BatchRecipient {\r\n    error UnexpectedBatchData();\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] calldata,\r\n        uint256[] calldata,\r\n        bytes memory data\r\n    ) external view returns (bytes4) {\r\n        if (data.length != 0) {\r\n            revert UnexpectedBatchData();\r\n        }\r\n        return ERC1155BatchRecipient.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n"
    },
    "contracts/test/ExcessReturnDataRecipient.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity >=0.8.7;\r\n\r\ncontract ExcessReturnDataRecipient {\r\n    uint256 revertDataSize;\r\n\r\n    function setRevertDataSize(uint256 size) external {\r\n        revertDataSize = size;\r\n    }\r\n\r\n    // Code created with the help of Stack Exchange question\r\n    // https://ethereum.stackexchange.com/questions/8086\r\n    // Question by Doug King:\r\n    // https://ethereum.stackexchange.com/users/2041/doug-king\r\n    // Answer by Tjaden Hess:\r\n    // https://ethereum.stackexchange.com/users/131/tjaden-hess\r\n    // Modified to use Yul instead of Solidity and added change of\r\n    // base to convert to natural logarithm\r\n    function ln(uint256 x) internal pure returns (uint256 y) {\r\n        assembly {\r\n            let arg := x\r\n            x := sub(x, 1)\r\n            x := or(x, div(x, 0x02))\r\n            x := or(x, div(x, 0x04))\r\n            x := or(x, div(x, 0x10))\r\n            x := or(x, div(x, 0x100))\r\n            x := or(x, div(x, 0x10000))\r\n            x := or(x, div(x, 0x100000000))\r\n            x := or(x, div(x, 0x10000000000000000))\r\n            x := or(x, div(x, 0x100000000000000000000000000000000))\r\n            x := add(x, 1)\r\n            let m := mload(0x40)\r\n            mstore(\r\n                m,\r\n                0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd\r\n            )\r\n            mstore(\r\n                add(m, 0x20),\r\n                0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe\r\n            )\r\n            mstore(\r\n                add(m, 0x40),\r\n                0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616\r\n            )\r\n            mstore(\r\n                add(m, 0x60),\r\n                0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff\r\n            )\r\n            mstore(\r\n                add(m, 0x80),\r\n                0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e\r\n            )\r\n            mstore(\r\n                add(m, 0xa0),\r\n                0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707\r\n            )\r\n            mstore(\r\n                add(m, 0xc0),\r\n                0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606\r\n            )\r\n            mstore(\r\n                add(m, 0xe0),\r\n                0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100\r\n            )\r\n            mstore(0x40, add(m, 0x100))\r\n            let\r\n                magic\r\n            := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\r\n            let\r\n                shift\r\n            := 0x100000000000000000000000000000000000000000000000000000000000000\r\n            let a := div(mul(x, magic), shift)\r\n            y := div(mload(add(m, sub(255, a))), shift)\r\n            y := add(\r\n                y,\r\n                mul(\r\n                    256,\r\n                    gt(\r\n                        arg,\r\n                        0x8000000000000000000000000000000000000000000000000000000000000000\r\n                    )\r\n                )\r\n            )\r\n            y := mul(y, 10000000000000000)\r\n            y := div(y, 14426950408889632)\r\n        }\r\n    }\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        assembly {\r\n            switch gt(y, 3)\r\n            case 1 {\r\n                z := y\r\n                let x := div(add(y, 1), 2)\r\n                for {\r\n\r\n                } lt(x, z) {\r\n\r\n                } {\r\n                    z := x\r\n                    x := div(add(div(y, x), x), 2)\r\n                }\r\n            }\r\n            case 0 {\r\n                z := 1\r\n            }\r\n        }\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes calldata\r\n    ) external view returns (bytes4 magic) {\r\n        magic = this.onERC1155Received.selector;\r\n        if (revertDataSize > 0) {\r\n            uint256 gasToCalculateSqrt = (54 * ln(gasleft())) + 1200;\r\n            uint256 w = (sqrt(\r\n                2048 * (gasleft() - gasToCalculateSqrt) + 9431040\r\n            ) - 3072) / 4;\r\n\r\n            assembly {\r\n                let size := mul(w, 32)\r\n                calldatacopy(0, 0, mul(w, 32))\r\n                revert(0, size)\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        if (revertDataSize > 0) {\r\n            uint256 gasToCalculateSqrt = (54 * ln(gasleft())) + 1200;\r\n            uint256 w = (sqrt(\r\n                2048 * (gasleft() - gasToCalculateSqrt) + 9431040\r\n            ) - 3072) / 2;\r\n\r\n            assembly {\r\n                let size := mul(w, 32)\r\n                calldatacopy(0, 0, mul(w, 32))\r\n                revert(0, size)\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/test/Reenterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\ncontract Reenterer {\r\n    address public target;\r\n    uint256 public msgValue;\r\n    bytes public callData;\r\n\r\n    event Reentered(bytes returnData);\r\n\r\n    function prepare(\r\n        address targetToUse,\r\n        uint256 msgValueToUse,\r\n        bytes calldata callDataToUse\r\n    ) external {\r\n        target = targetToUse;\r\n        msgValue = msgValueToUse;\r\n        callData = callDataToUse;\r\n    }\r\n\r\n    receive() external payable {\r\n        (bool success, bytes memory returnData) = target.call{\r\n            value: msgValue\r\n        }(callData);\r\n\r\n        if (!success) {\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n\r\n        emit Reentered(returnData);\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestERC1155.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity >=0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\n\r\n// Used for minting test ERC1155s in our tests\r\ncontract TestERC1155 is ERC1155(\"{id}\") {\r\n    function mint(\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        _mint(to, tokenId, amount, \"\");\r\n        return true;\r\n    }\r\n\r\n    function uri(uint256) public pure override returns (string memory) {\r\n        return \"uri\";\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestERC20.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity >=0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n// Used for minting test ERC20s in our tests\r\ncontract TestERC20 is ERC20(\"Test20\", \"TST20\") {\r\n    bool public blocked;\r\n\r\n    bool public noReturnData;\r\n\r\n    constructor() {\r\n        blocked = false;\r\n        noReturnData = false;\r\n    }\r\n\r\n    function blockTransfer(bool blocking) external {\r\n        blocked = blocking;\r\n    }\r\n\r\n    function setNoReturnData(bool noReturn) external {\r\n        noReturnData = noReturn;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external returns (bool) {\r\n        _mint(to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public override returns (bool ok) {\r\n        if (blocked) {\r\n            return false;\r\n        }\r\n\r\n        super.transferFrom(from, to, amount);\r\n\r\n        if (noReturnData) {\r\n            assembly {\r\n                return(0, 0)\r\n            }\r\n        }\r\n\r\n        ok = true;\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestERC721.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity >=0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\n// Used for minting test ERC721s in our tests\r\ncontract TestERC721 is ERC721(\"Test721\", \"TST721\") {\r\n    function mint(address to, uint256 tokenId) public returns (bool) {\r\n        _safeMint(to, tokenId, \"\");\r\n        return true;\r\n    }\r\n\r\n    function mintToSender(uint256 tokenId) public returns (bool) {\r\n        return mint(msg.sender, tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256) public pure override returns (string memory) {\r\n        return \"tokenURI\";\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestZone.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\n// import { ZoneInterface } from \"../interfaces/ZoneInterface.sol\";\r\n\r\n// prettier-ignore\r\n// import {\r\n//     AdvancedOrder,\r\n//     CriteriaResolver\r\n// } from \"../lib/ConsiderationStructs.sol\";\r\n\r\n// prettier-ignore\r\nenum ItemType {\r\n    // 0: ETH on mainnet, MATIC on polygon, etc.\r\n    NATIVE,\r\n\r\n    // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\r\n    ERC20,\r\n\r\n    // 2: ERC721 items\r\n    ERC721,\r\n\r\n    // 3: ERC1155 items\r\n    ERC1155,\r\n\r\n    // 4: ERC721 items where a number of tokenIds are supported\r\n    ERC721_WITH_CRITERIA,\r\n\r\n    // 5: ERC1155 items where a number of ids are supported\r\n    ERC1155_WITH_CRITERIA\r\n}\r\n\r\n// prettier-ignore\r\nenum OrderType {\r\n    // 0: no partial fills, anyone can execute\r\n    FULL_OPEN,\r\n\r\n    // 1: partial fills supported, anyone can execute\r\n    PARTIAL_OPEN,\r\n\r\n    // 2: no partial fills, only offerer or zone can execute\r\n    FULL_RESTRICTED,\r\n\r\n    // 3: partial fills supported, only offerer or zone can execute\r\n    PARTIAL_RESTRICTED\r\n}\r\n\r\n// prettier-ignore\r\nenum Side {\r\n    // 0: Items that can be spent\r\n    OFFER,\r\n    \r\n    // 1: Items that must be received\r\n    CONSIDERATION\r\n}\r\n\r\n/**\r\n * @dev An offer item has five components: an item type (ETH or other native\r\n *      tokens, ERC20, ERC721, and ERC1155, as well as criteria-based ERC721 and\r\n *      ERC1155), a token address, a dual-purpose \"identifierOrCriteria\"\r\n *      component that will either represent a tokenId or a merkle root\r\n *      depending on the item type, and a start and end amount that support\r\n *      increasing or decreasing amounts over the duration of the respective\r\n *      order.\r\n */\r\nstruct OfferItem {\r\n    ItemType itemType;\r\n    address token;\r\n    uint256 identifierOrCriteria;\r\n    uint256 startAmount;\r\n    uint256 endAmount;\r\n}\r\n\r\n/**\r\n * @dev A consideration item has the same five components as an offer item and\r\n *      an additional sixth component designating the required recipient of the\r\n *      item.\r\n */\r\nstruct ConsiderationItem {\r\n    ItemType itemType;\r\n    address token;\r\n    uint256 identifierOrCriteria;\r\n    uint256 startAmount;\r\n    uint256 endAmount;\r\n    address payable recipient;\r\n}\r\n\r\n/**\r\n * @dev The full set of order components, with the exception of the nonce, must\r\n *      be supplied when fulfilling more sophisticated orders or groups of\r\n *      orders. The total number of original consideration items must also be\r\n *      supplied, as the caller may specify additional consideration items.\r\n */\r\nstruct OrderParameters {\r\n    address offerer; // 0x00\r\n    address zone; // 0x20\r\n    OfferItem[] offer; // 0x40\r\n    ConsiderationItem[] consideration; // 0x60\r\n    OrderType orderType; // 0x80\r\n    uint256 startTime; // 0xa0\r\n    uint256 endTime; // 0xc0\r\n    bytes32 zoneHash; // 0xe0\r\n    uint256 salt; // 0x100\r\n    bytes32 conduitKey; // 0x120\r\n    uint256 totalOriginalConsiderationItems; // 0x140\r\n    // offer.length                          // 0x160\r\n}\r\n\r\n/**\r\n * @dev Advanced orders include a numerator (i.e. a fraction to attempt to fill)\r\n *      and a denominator (the total size of the order) in addition to the\r\n *      signature and other order parameters. It also supports an optional field\r\n *      for supplying extra data; this data will be included in a staticcall to\r\n *      `isValidOrderIncludingExtraData` on the zone for the order if the order\r\n *      type is restricted and the offerer or zone are not the caller.\r\n */\r\nstruct AdvancedOrder {\r\n    OrderParameters parameters;\r\n    uint120 numerator;\r\n    uint120 denominator;\r\n    bytes signature;\r\n    bytes extraData;\r\n}\r\n\r\n/**\r\n * @dev A criteria resolver specifies an order, side (offer vs. consideration),\r\n *      and item index. It then provides a chosen identifier (i.e. tokenId)\r\n *      alongside a merkle proof demonstrating the identifier meets the required\r\n *      criteria.\r\n */\r\nstruct CriteriaResolver {\r\n    uint256 orderIndex;\r\n    Side side;\r\n    uint256 index;\r\n    uint256 identifier;\r\n    bytes32[] criteriaProof;\r\n}\r\n\r\ninterface ZoneInterface {\r\n    // Called by Consideration whenever extraData is not provided by the caller.\r\n    function isValidOrder(\r\n        bytes32 orderHash,\r\n        address caller,\r\n        address offerer,\r\n        bytes32 zoneHash\r\n    ) external view returns (bytes4 validOrderMagicValue);\r\n\r\n    // Called by Consideration whenever any extraData is provided by the caller.\r\n    function isValidOrderIncludingExtraData(\r\n        bytes32 orderHash,\r\n        address caller,\r\n        AdvancedOrder calldata order,\r\n        bytes32[] calldata priorOrderHashes,\r\n        CriteriaResolver[] calldata criteriaResolvers\r\n    ) external view returns (bytes4 validOrderMagicValue);\r\n}\r\n\r\ncontract TestZone is ZoneInterface {\r\n    function isValidOrder(\r\n        bytes32 orderHash,\r\n        address caller,\r\n        address offerer,\r\n        bytes32 zoneHash\r\n    ) external pure override returns (bytes4 validOrderMagicValue) {\r\n        orderHash;\r\n        caller;\r\n        offerer;\r\n\r\n        if (zoneHash == bytes32(uint256(1))) {\r\n            revert(\"Revert on zone hash 1\");\r\n        } else if (zoneHash == bytes32(uint256(2))) {\r\n            assembly {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        validOrderMagicValue = zoneHash != bytes32(uint256(3))\r\n            ? ZoneInterface.isValidOrder.selector\r\n            : bytes4(0xffffffff);\r\n    }\r\n\r\n    function isValidOrderIncludingExtraData(\r\n        bytes32 orderHash,\r\n        address caller,\r\n        AdvancedOrder calldata order,\r\n        bytes32[] calldata priorOrderHashes,\r\n        CriteriaResolver[] calldata criteriaResolvers\r\n    ) external pure override returns (bytes4 validOrderMagicValue) {\r\n        orderHash;\r\n        caller;\r\n        order;\r\n        priorOrderHashes;\r\n        criteriaResolvers;\r\n\r\n        if (order.extraData.length == 4) {\r\n            revert(\"Revert on extraData length 4\");\r\n        } else if (order.extraData.length == 5) {\r\n            assembly {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        validOrderMagicValue = order.parameters.zoneHash != bytes32(uint256(3))\r\n            ? ZoneInterface.isValidOrder.selector\r\n            : bytes4(0xffffffff);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 300,
      "details": {
        "yul": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}