{
  "address": "0x0C579a42587AbabB60dc668d5e4C1C8A50082484",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_rootNode",
          "type": "bytes32"
        },
        {
          "internalType": "contract INameWrapper",
          "name": "_nameWrapper",
          "type": "address"
        },
        {
          "internalType": "contract IEarthResolver",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "contract InsuranceFactory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IOptiDomainsAttestation",
          "name": "_attestation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "acheivedTon",
          "type": "uint256"
        }
      ],
      "name": "AttestProgress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "partner",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goalTon",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "BuyInsurance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "acheivedTon",
          "type": "uint256"
        }
      ],
      "name": "attestProgress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attestationDomain",
      "outputs": [
        {
          "internalType": "contract IOptiDomainsAttestation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attestationStation",
      "outputs": [
        {
          "internalType": "contract AttestationStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "partner",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "goalTon",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "buyInsurance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "method",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        }
      ],
      "name": "deployPartner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "deployValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "domainOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract InsuranceFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "insuranceDetail",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "partner",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "goalMethod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goalYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goalTon",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "acheivedTon",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "ids",
          "type": "bytes32[]"
        }
      ],
      "name": "insuranceDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "partner",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "goalMethod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "goalYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "goalTon",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "acheivedTon",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premium",
              "type": "uint256"
            }
          ],
          "internalType": "struct EarthRegistrarController.InsuranceDetail[]",
          "name": "details",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameWrapper",
      "outputs": [
        {
          "internalType": "contract INameWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "partnerGoal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "method",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "internalType": "contract InsurancePool",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expiration",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "kycHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IEarthResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "takeoverRootNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xabaf1b4c503a1021a2efe75422ff72ecd522a1a5f0c71ba89cb59b900434b1b2",
  "receipt": {
    "to": null,
    "from": "0x35D3935C54430e5D661F253e1A1fFc147b9dDd77",
    "contractAddress": "0x0C579a42587AbabB60dc668d5e4C1C8A50082484",
    "transactionIndex": 1,
    "gasUsed": "1673392",
    "logsBloom": "0x
    "blockHash": "0x7519ecb8352fdbce08d8343abe2625825705c7d48f0fba94aae9606fead0edc7",
    "transactionHash": "0xabaf1b4c503a1021a2efe75422ff72ecd522a1a5f0c71ba89cb59b900434b1b2",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8883502,
        "transactionHash": "0xabaf1b4c503a1021a2efe75422ff72ecd522a1a5f0c71ba89cb59b900434b1b2",
        "address": "0x0C579a42587AbabB60dc668d5e4C1C8A50082484",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000035d3935c54430e5d661f253e1a1ffc147b9ddd77"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7519ecb8352fdbce08d8343abe2625825705c7d48f0fba94aae9606fead0edc7"
      }
    ],
    "blockNumber": 8883502,
    "cumulativeGasUsed": "1720305",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x35D3935C54430e5D661F253e1A1fFc147b9dDd77",
    "0x205f4a8557dd0db1ef6d10050f4306b94c7ebb3c4ae9ea761eb8dfafc1ed27d5",
    "0x90b765bcb20121828Ec92ef957645d86722D16cA",
    "0x1eBC01F781d25108D6f7D6DF290E7F53EaA60FD8",
    "0x377e53b8BB022Cc52CD27CE314F5D17DA5b52Be7",
    "0x7688E389C0dE9106123f56c11254C7e4c2AA3bd4",
    "0xF54e60b6926504A2Ce79214274201257a19e8FD7"
  ],
  "numDeployments": 1,
  "solcInputHash": "226fddf1c1505548dad9a0c0897f87e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_rootNode\",\"type\":\"bytes32\"},{\"internalType\":\"contract INameWrapper\",\"name\":\"_nameWrapper\",\"type\":\"address\"},{\"internalType\":\"contract IEarthResolver\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"contract InsuranceFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IOptiDomainsAttestation\",\"name\":\"_attestation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acheivedTon\",\"type\":\"uint256\"}],\"name\":\"AttestProgress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"partner\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goalTon\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"BuyInsurance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"acheivedTon\",\"type\":\"uint256\"}],\"name\":\"attestProgress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attestationDomain\",\"outputs\":[{\"internalType\":\"contract IOptiDomainsAttestation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attestationStation\",\"outputs\":[{\"internalType\":\"contract AttestationStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"partner\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"goalTon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"buyInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"method\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"}],\"name\":\"deployPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"deployValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domainOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract InsuranceFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"insuranceDetail\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"partner\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"goalMethod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goalYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goalTon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acheivedTon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\"}],\"name\":\"insuranceDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"partner\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"goalMethod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goalYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goalTon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acheivedTon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"internalType\":\"struct EarthRegistrarController.InsuranceDetail[]\",\"name\":\"details\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameWrapper\",\"outputs\":[{\"internalType\":\"contract INameWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"partnerGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"method\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"contract InsurancePool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"kycHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IEarthResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeoverRootNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EarthRegistrarController.sol\":\"EarthRegistrarController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbc8d1f66b26e211a1f6f40a17453e9d5020ec96749014379205cff100809884c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/EarthRegistrarController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"./optidomains/INameWrapper.sol\\\";\\r\\nimport \\\"./optidomains/AttestationStation.sol\\\";\\r\\nimport \\\"./optidomains/IOptiDomainsAttestation.sol\\\";\\r\\nimport \\\"./InsuranceFactory.sol\\\";\\r\\nimport \\\"./InsurancePool.sol\\\";\\r\\n\\r\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\r\\n\\r\\nbytes32 constant INSURANCE_DETAIL = keccak256(\\\"838.earth.detail\\\");\\r\\nbytes32 constant INSURANCE_VALIDATION = keccak256(\\\"838.earth.validation\\\");\\r\\n\\r\\nerror Forbidden();\\r\\n\\r\\ninterface IEarthResolver {\\r\\n  event AddrChanged(bytes32 indexed node, address a);\\r\\n\\r\\n  /**\\r\\n   * Returns the address associated with an ENS node.\\r\\n   * @param node The ENS node to query.\\r\\n   * @return The associated address.\\r\\n   */\\r\\n  function addr(bytes32 node) external view returns (address payable);\\r\\n\\r\\n  /**\\r\\n   * Sets the address associated with an ENS node.\\r\\n   * May only be called by the owner of that node in the ENS registry.\\r\\n   * @param node The node to update.\\r\\n   * @param a The address to set.\\r\\n   */\\r\\n  function setAddr(\\r\\n    bytes32 node,\\r\\n    address a\\r\\n  ) external;\\r\\n\\r\\n  function setEarthKyc(bytes32 node, bytes32 kycHash) external;\\r\\n  function earthKyc(bytes32 node) external view returns(bytes32);\\r\\n}\\r\\n\\r\\ncontract EarthRegistrarController is Ownable, ERC1155Holder {\\r\\n  mapping(address => bool) public isValidator;\\r\\n\\r\\n  address immutable operator;\\r\\n  bytes32 public immutable rootNode;\\r\\n  INameWrapper public immutable nameWrapper;\\r\\n  IEarthResolver public immutable resolver;\\r\\n  IERC20 public immutable baseToken;\\r\\n  InsuranceFactory public immutable factory;\\r\\n\\r\\n  AttestationStation public immutable attestationStation;\\r\\n  IOptiDomainsAttestation public immutable attestationDomain;\\r\\n\\r\\n  struct PartnerGoal {\\r\\n    uint256 method;\\r\\n    uint256 year;\\r\\n    InsurancePool pool;\\r\\n  }\\r\\n\\r\\n  mapping(bytes32 => PartnerGoal) public partnerGoal;\\r\\n\\r\\n  struct InsuranceDetail {\\r\\n    bytes32 partner;\\r\\n    uint256 goalMethod;\\r\\n    uint256 goalYear;\\r\\n    uint256 goalTon;\\r\\n    uint256 acheivedTon;\\r\\n    uint256 premium;\\r\\n  }\\r\\n\\r\\n  mapping(bytes32 => InsuranceDetail) public insuranceDetail;\\r\\n\\r\\n  mapping(bytes32 => address) public domainOwner;\\r\\n\\r\\n  constructor(\\r\\n    address _operator,\\r\\n    bytes32 _rootNode, \\r\\n    INameWrapper _nameWrapper,\\r\\n    IEarthResolver _resolver,\\r\\n    IERC20 _baseToken,\\r\\n    InsuranceFactory _factory,\\r\\n    IOptiDomainsAttestation _attestation\\r\\n  ) {\\r\\n    operator = _operator;\\r\\n    rootNode = _rootNode;\\r\\n    nameWrapper = _nameWrapper;\\r\\n    resolver = _resolver;\\r\\n    baseToken = _baseToken;\\r\\n    factory = _factory;\\r\\n\\r\\n    attestationDomain = _attestation;\\r\\n    attestationStation = _attestation.attestationStation();\\r\\n  }\\r\\n\\r\\n  function register(string calldata name, address owner, uint64 expiration, bytes32 kycHash, bytes calldata signature) public {\\r\\n    // Reduce time to integrate frontend\\r\\n    // if (\\r\\n    //   !SignatureChecker.isValidSignatureNow(\\r\\n    //     operator,\\r\\n    //     keccak256(\\r\\n    //       abi.encodePacked(\\r\\n    //         bytes1(0x19),\\r\\n    //         bytes1(0),\\r\\n    //         address(this),\\r\\n    //         uint256(block.chainid),\\r\\n    //         bytes32(\\r\\n    //           0xdd007bd789f73e08c2714644c55b11c7d202931d717def434e3c9caa12a9f583\\r\\n    //         ), // keccak256(\\\"register\\\")\\r\\n    //         name,\\r\\n    //         owner,\\r\\n    //         expiration,\\r\\n    //         kycHash\\r\\n    //       )\\r\\n    //     ),\\r\\n    //     signature\\r\\n    //   )\\r\\n    // ) {\\r\\n    //   revert Forbidden();\\r\\n    // }\\r\\n\\r\\n    bytes32 node = keccak256(abi.encodePacked(rootNode, keccak256(bytes(name))));\\r\\n    \\r\\n    nameWrapper.setSubnodeOwner(rootNode, name, address(this), 0, expiration);\\r\\n    nameWrapper.setResolver(node, address(resolver));\\r\\n    resolver.setAddr(node, owner);\\r\\n    resolver.setEarthKyc(node, kycHash);\\r\\n\\r\\n    domainOwner[node] = owner;\\r\\n  }\\r\\n\\r\\n  function deployPartner(bytes32 node, uint256 method, uint256 year) public {\\r\\n    require(method != 0, \\\"Unknown method\\\");\\r\\n    require(year != 0, \\\"Unknown year\\\");\\r\\n    require(msg.sender == domainOwner[node], \\\"Not owner\\\");\\r\\n\\r\\n    InsurancePool pool = factory.deployPool(\\r\\n      domainOwner[node],\\r\\n      baseToken,\\r\\n      0,\\r\\n      0,\\r\\n      0,\\r\\n      3500,\\r\\n      0,\\r\\n      1893460000 + 31600000 * (year - 2030),\\r\\n      \\\"838.Earth\\\",\\r\\n      \\\"EARTH\\\"\\r\\n    );\\r\\n\\r\\n    partnerGoal[node] = PartnerGoal({\\r\\n      method: method,\\r\\n      year: year,\\r\\n      pool: pool\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function deployValidator(address _validator, bool _enabled) public onlyOwner {\\r\\n    isValidator[_validator] = _enabled;\\r\\n  }\\r\\n\\r\\n  event BuyInsurance(bytes32 node, bytes32 partner, string name, uint256 goalTon, uint256 premium);\\r\\n  function buyInsurance(\\r\\n    bytes32 node,\\r\\n    bytes32 partner,\\r\\n    string calldata name,\\r\\n\\r\\n    uint256 goalTon,\\r\\n    uint256 premium\\r\\n  ) public {\\r\\n    require(partnerGoal[partner].method > 0, \\\"Not registered\\\");\\r\\n\\r\\n    address owner = nameWrapper.ownerOf(uint256(node));\\r\\n    nameWrapper.setSubnodeOwner(node, name, owner, 0, uint64(block.timestamp + 365 days));\\r\\n\\r\\n    insuranceDetail[node] = InsuranceDetail({\\r\\n      partner: partner,\\r\\n      goalMethod: partnerGoal[partner].method,\\r\\n      goalYear: partnerGoal[partner].year,\\r\\n      goalTon: goalTon,\\r\\n      acheivedTon: 0,\\r\\n      premium: premium\\r\\n    });\\r\\n\\r\\n    attestationStation.attest(attestationDomain.buildAttestationData(node, INSURANCE_DETAIL, 4, abi.encode(insuranceDetail[node])));\\r\\n\\r\\n    baseToken.transferFrom(msg.sender, address(partnerGoal[partner].pool), premium);\\r\\n\\r\\n    partnerGoal[partner].pool.distribute(premium);\\r\\n\\r\\n    emit BuyInsurance(node, partner, name, goalTon, premium);\\r\\n  }\\r\\n\\r\\n  event AttestProgress(address validator, bytes32 node, uint256 acheivedTon);\\r\\n  function attestProgress(bytes32 node, uint256 acheivedTon) public {\\r\\n    require(isValidator[msg.sender], \\\"Not a validator\\\");\\r\\n\\r\\n    InsuranceDetail storage oldDetail = insuranceDetail[node];\\r\\n\\r\\n    insuranceDetail[node] = InsuranceDetail({\\r\\n      partner: oldDetail.partner,\\r\\n      goalMethod: oldDetail.goalMethod,\\r\\n      goalYear: oldDetail.goalYear,\\r\\n      goalTon: oldDetail.goalTon,\\r\\n      acheivedTon: acheivedTon,\\r\\n      premium: oldDetail.premium\\r\\n    });\\r\\n\\r\\n    attestationStation.attest(attestationDomain.buildAttestationData(node, INSURANCE_DETAIL, 4, abi.encode(insuranceDetail[node])));\\r\\n    attestationStation.attest(msg.sender, INSURANCE_VALIDATION, abi.encode(msg.sender, node, acheivedTon));\\r\\n\\r\\n    emit AttestProgress(msg.sender, node, acheivedTon);\\r\\n  }\\r\\n\\r\\n  // DEBUG only\\r\\n  function takeoverRootNode() public onlyOwner {\\r\\n    nameWrapper.safeTransferFrom(address(this), msg.sender, uint256(rootNode), 1, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  // For fast frontend development\\r\\n  function insuranceDetails(bytes32[] calldata ids) public view returns(InsuranceDetail[] memory details) {\\r\\n    details = new InsuranceDetail[](ids.length);\\r\\n\\r\\n    unchecked {\\r\\n      for (uint i; i < ids.length; ++i) {\\r\\n        details[i] = insuranceDetail[ids[i]];\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x4f4422fe8c00dfd9986bbb5cd6fa7d5df4351513b23b7bd307a7265c7b0fde18\",\"license\":\"MIT\"},\"contracts/IDevParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDevParameters {\\r\\n  function investorDevFee() external view returns(uint256);\\r\\n  function buyerDevFee() external view returns(uint256);\\r\\n  function maxBuyerFee() external view returns(uint256);\\r\\n}\",\"keccak256\":\"0x5d21af633e8648073ace9b8ffce59d2c7215c4a5bf8ddeb9890307dce78455c3\",\"license\":\"BUSL-1.1\"},\"contracts/IDistribute.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDistribute {\\r\\n  function distribute(uint256 amount) external;\\r\\n}\",\"keccak256\":\"0x006b019a5e89bcdf8b73cfb7e64d6b4ab0173123ae7b607dbce158d2820e8dd7\",\"license\":\"BUSL-1.1\"},\"contracts/InsuranceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./InsurancePool.sol\\\";\\r\\nimport \\\"./IDevParameters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract InsuranceFactory is Ownable, IDevParameters {\\r\\n  address public immutable poolImplementation;\\r\\n\\r\\n  // in BPS unit\\r\\n  uint256 public investorDevFee = 4000;\\r\\n  uint256 public buyerDevFee = 200;\\r\\n  uint256 public maxBuyerFee = 2000;\\r\\n  \\r\\n  constructor(address _poolImplementation) {\\r\\n    poolImplementation = _poolImplementation;\\r\\n  }\\r\\n\\r\\n  event DeployPool(address indexed owner, address indexed pool, uint256 expiration);\\r\\n  function deployPool(\\r\\n    address _owner,\\r\\n    IERC20 _baseToken,\\r\\n    uint256 _buyPercentageFee,\\r\\n    uint256 _depositPercentageFee,\\r\\n    uint256 _depositLimit,\\r\\n    uint256 _distributionRatio,\\r\\n    uint256 _masterchefRatio,\\r\\n    uint256 _expiration,\\r\\n    string memory _tokenName,\\r\\n    string memory _tokenSymbol\\r\\n  ) public returns(InsurancePool pool) {\\r\\n    pool = InsurancePool(Clones.clone(poolImplementation));\\r\\n    pool.initialize(\\r\\n      _owner, \\r\\n      _baseToken,\\r\\n      _buyPercentageFee,\\r\\n      _depositPercentageFee, \\r\\n      _depositLimit, \\r\\n      _distributionRatio, \\r\\n      _masterchefRatio, \\r\\n      _expiration, \\r\\n      _tokenName, \\r\\n      _tokenSymbol\\r\\n    );\\r\\n\\r\\n    emit DeployPool(_owner, address(pool), _expiration);\\r\\n  }\\r\\n\\r\\n  event UpdateInvestorDevFee(uint256 newFeeBps);\\r\\n  function updateInvestorDevFee(uint256 feeBps) public onlyOwner {\\r\\n    require(feeBps <= 10000, \\\"Invalid fee\\\");\\r\\n    investorDevFee = feeBps;\\r\\n    emit UpdateInvestorDevFee(feeBps);\\r\\n  }\\r\\n\\r\\n  event UpdateBuyerDevFee(uint256 newFeeBps);\\r\\n  function updateBuyerDevFee(uint256 feeBps) public onlyOwner {\\r\\n    // Limit to maxBuyerFee\\r\\n    require(feeBps <= maxBuyerFee, \\\"Invalid fee\\\");\\r\\n    buyerDevFee = feeBps;\\r\\n    emit UpdateBuyerDevFee(feeBps);\\r\\n  }\\r\\n\\r\\n  event UpdateMaxBuyerFee(uint256 newFeeBps);\\r\\n  function updateMaxBuyerFee(uint256 feeBps) public onlyOwner {\\r\\n    require(feeBps <= 10000, \\\"Invalid fee\\\");\\r\\n    maxBuyerFee = feeBps;\\r\\n    emit UpdateMaxBuyerFee(feeBps);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x05ab1365c02cf30ecaef6e4da23786da8f7ee0ddd1b61472e3c9b2870d5ffb15\",\"license\":\"MIT\"},\"contracts/InsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IDistribute.sol\\\";\\r\\nimport \\\"./IDevParameters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nerror InvalidPercentage();\\r\\nerror Zero();\\r\\nerror Expired(uint256 expiration);\\r\\nerror NotExpired(uint256 expiration);\\r\\nerror DepositLimit();\\r\\nerror OutOfReserve();\\r\\nerror WithdrawBug();\\r\\n\\r\\ninterface INftInitializer {\\r\\n  function initialize(\\r\\n    address _pool,\\r\\n    IERC20 _baseToken,\\r\\n    string memory _tokenName,\\r\\n    string memory _tokenSymbol\\r\\n  ) external;\\r\\n}\\r\\n\\r\\ninterface IMasterchefInitializer is IDistribute {\\r\\n\\tfunction initialize(\\r\\n    address _insurancePool,\\r\\n\\t\\taddress _baseToken\\r\\n\\t) external;\\r\\n}\\r\\n\\r\\ncontract InsurancePool is ERC20Upgradeable, OwnableUpgradeable, IDistribute {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  address public immutable nftImplementation;\\r\\n  address public immutable masterchefImplementation;\\r\\n\\r\\n  IERC20 public baseToken;\\r\\n\\r\\n  address public factory;\\r\\n  address public nft;\\r\\n  IMasterchefInitializer public masterchef;\\r\\n\\r\\n  uint256 public rewardPerShare;\\r\\n  mapping(address => uint256) public rewardDebt; \\r\\n\\r\\n  uint256 public buyPercentageFee;\\r\\n  uint256 public depositPercentageFee;\\r\\n  uint256 public depositLimit;\\r\\n\\r\\n  uint256 public distributionRatio;\\r\\n  uint256 public masterchefRatio;\\r\\n\\r\\n  uint256 public expiration;\\r\\n\\r\\n  // This track profit of token stored in the insurance\\r\\n  int256 public keepProfit;\\r\\n\\r\\n  // in BPS unit\\r\\n  uint256 private investorDevFee;\\r\\n\\r\\n  uint256 public supplyAtExpired;\\r\\n\\r\\n  modifier onlyNft {\\r\\n    // TODO: HACKATHON only: Remove security for time trade off\\r\\n    // require(msg.sender == nft, \\\"Not NFT\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function isGovernance(address addr) public view returns(bool) {\\r\\n    return addr == owner() || addr == OwnableUpgradeable(factory).owner();\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance {\\r\\n    require(isGovernance(msg.sender), \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    address _nftImplementation,\\r\\n    address _masterchefImplementation\\r\\n  ) {\\r\\n    nftImplementation = _nftImplementation;\\r\\n    masterchefImplementation = _masterchefImplementation;\\r\\n  }\\r\\n\\r\\n  function getInvestorDevFee() public view returns(uint256) {\\r\\n    if (investorDevFee == 10001) {\\r\\n      return IDevParameters(factory).investorDevFee();\\r\\n    }\\r\\n    return investorDevFee;\\r\\n  }\\r\\n\\r\\n  event UpdateInvestorDevFee(uint256 newFeeBps);\\r\\n  function updateInvestorDevFee(uint256 feeBps) public {\\r\\n    require(msg.sender == OwnableUpgradeable(factory).owner(), \\\"Not dev\\\");\\r\\n    require(feeBps <= 10001, \\\"Invalid fee\\\");\\r\\n    investorDevFee = feeBps;\\r\\n    emit UpdateInvestorDevFee(feeBps);\\r\\n  }\\r\\n\\r\\n  event PoolInitialize(address indexed owner, address indexed nftContract, address indexed masterchefContract, uint256 expiration);\\r\\n  function initialize(\\r\\n    address _owner,\\r\\n    IERC20 _baseToken,\\r\\n    uint256 _buyPercentageFee,\\r\\n    uint256 _depositPercentageFee,\\r\\n    uint256 _depositLimit,\\r\\n    uint256 _distributionRatio,\\r\\n    uint256 _masterchefRatio,\\r\\n    uint256 _expiration,\\r\\n    string memory _tokenName,\\r\\n    string memory _tokenSymbol\\r\\n  ) external initializer {\\r\\n    if (!(_distributionRatio <= 10000 && _masterchefRatio <= 10000 && _depositPercentageFee <= 10000 && 10000 - _distributionRatio - _masterchefRatio >= 0)) {\\r\\n      revert InvalidPercentage();\\r\\n    }\\r\\n\\r\\n    investorDevFee = 10001;\\r\\n    \\r\\n    factory = msg.sender;\\r\\n\\r\\n    if (IDevParameters(factory).buyerDevFee() + _buyPercentageFee > IDevParameters(factory).maxBuyerFee()) {\\r\\n      revert InvalidPercentage();\\r\\n    }\\r\\n\\r\\n    nft = Clones.clone(nftImplementation);\\r\\n    INftInitializer(nft).initialize(address(this), _baseToken, _tokenName, _tokenSymbol);\\r\\n\\r\\n    masterchef = IMasterchefInitializer(Clones.clone(masterchefImplementation));\\r\\n    masterchef.initialize(address(this), address(_baseToken));\\r\\n\\r\\n    baseToken = _baseToken;\\r\\n\\r\\n    buyPercentageFee = _buyPercentageFee;\\r\\n    depositPercentageFee = _depositPercentageFee;\\r\\n    depositLimit = _depositLimit;\\r\\n\\r\\n    distributionRatio = _distributionRatio;\\r\\n    masterchefRatio = _masterchefRatio;\\r\\n\\r\\n    expiration = _expiration;\\r\\n\\r\\n    _transferOwnership(_owner);\\r\\n    __ERC20_init(_tokenName, _tokenSymbol);\\r\\n\\r\\n    emit PoolInitialize(_owner, address(nft), address(masterchef), _expiration);\\r\\n  }\\r\\n\\r\\n  function getParameters() public view returns(\\r\\n    address _owner,\\r\\n    IERC20 _baseToken,\\r\\n    uint256 _buyPercentageFee,\\r\\n    uint256 _depositPercentageFee,\\r\\n    uint256 _depositLimit,\\r\\n    uint256 _distributionRatio,\\r\\n    uint256 _masterchefRatio,\\r\\n    uint256 _expiration,\\r\\n    string memory _tokenName,\\r\\n    string memory _tokenSymbol\\r\\n  ) {\\r\\n    _owner = owner();\\r\\n    _baseToken = baseToken;\\r\\n    _buyPercentageFee = buyPercentageFee;\\r\\n    _depositPercentageFee = depositPercentageFee;\\r\\n    _depositLimit = depositLimit;\\r\\n    _distributionRatio = distributionRatio;\\r\\n    _masterchefRatio = masterchefRatio;\\r\\n    _expiration = expiration;\\r\\n    _tokenName = name();\\r\\n    _tokenSymbol = symbol();\\r\\n  }\\r\\n\\r\\n  event SetDepositLimit(uint256 newLimit);\\r\\n  function setDepositLimit(uint256 newLimit) public onlyGovernance {\\r\\n    depositLimit = newLimit;\\r\\n    emit SetDepositLimit(newLimit);\\r\\n  }\\r\\n\\r\\n  event SetBuyPercentageFee(uint256 newPercentageFee);\\r\\n  function setBuyPercentageFee(uint256 newPercentageFee) public onlyGovernance {\\r\\n    if (IDevParameters(factory).buyerDevFee() + newPercentageFee > IDevParameters(factory).maxBuyerFee()) {\\r\\n      revert InvalidPercentage();\\r\\n    }\\r\\n    buyPercentageFee = newPercentageFee;\\r\\n    emit SetBuyPercentageFee(newPercentageFee);\\r\\n  }\\r\\n\\r\\n  event SetDepositPercentageFee(uint256 newPercentageFee);\\r\\n  function setDepositPercentageFee(uint256 newPercentageFee) public onlyGovernance {\\r\\n    if (newPercentageFee > 10000) revert InvalidPercentage();\\r\\n    depositPercentageFee = newPercentageFee;\\r\\n    emit SetDepositPercentageFee(newPercentageFee);\\r\\n  }\\r\\n\\r\\n  event SetDistributionRatio(uint256 newRatio);\\r\\n  function setDistributionRatio(uint256 newRatio) public onlyGovernance {\\r\\n    if (newRatio > 10000) revert InvalidPercentage();\\r\\n    distributionRatio = newRatio;\\r\\n    emit SetDistributionRatio(newRatio);\\r\\n  }\\r\\n\\r\\n  event SetMasterchefRatio(uint256 newRatio);\\r\\n  function setMasterchefRatio(uint256 newRatio) public onlyGovernance {\\r\\n    if (newRatio > 10000) revert InvalidPercentage();\\r\\n    masterchefRatio = newRatio;\\r\\n    emit SetMasterchefRatio(newRatio);\\r\\n  }\\r\\n\\r\\n  function getPendingReward(address wallet) public view returns(uint256) {\\r\\n    uint256 rewardFromShare = rewardPerShare * balanceOf(wallet) / 1e18;\\r\\n    uint256 amount = rewardFromShare - rewardDebt[wallet];\\r\\n    return amount;\\r\\n  }\\r\\n\\r\\n  event Harvest(address to, uint256 amount);\\r\\n  function harvest(address to) public {\\r\\n    if (to != address(0)) {\\r\\n      uint256 rewardFromShare = rewardPerShare * balanceOf(to) / 1e18;\\r\\n      uint256 amount = rewardFromShare - rewardDebt[to];\\r\\n      baseToken.safeTransfer(to, amount);\\r\\n      rewardDebt[to] = rewardFromShare;\\r\\n      emit Harvest(to, amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  event Deposit(address indexed payer, address indexed to, uint256 amount, uint256 fee);\\r\\n  function deposit(address to, uint256 amount) public {\\r\\n    if (amount == 0) revert Zero();\\r\\n    if (expiration != 0 && block.timestamp > expiration) revert Expired(expiration);\\r\\n\\r\\n    // Note: To pause deposit, set deposit limit to <= total supply but not zero\\r\\n    if (depositLimit != 0 && depositLimit + amount > totalSupply()) revert DepositLimit();\\r\\n\\r\\n    harvest(to);\\r\\n\\r\\n    baseToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n    uint256 fee = amount * depositPercentageFee * (10000 - getInvestorDevFee()) / 1e8;\\r\\n    uint256 devFee = amount * depositPercentageFee * getInvestorDevFee() / 1e8;\\r\\n\\r\\n    baseToken.safeTransfer(owner(), fee);\\r\\n    baseToken.safeTransfer(OwnableUpgradeable(factory).owner(), devFee);\\r\\n\\r\\n    _mint(to, amount - fee - devFee);\\r\\n\\r\\n    rewardDebt[to] = rewardPerShare * balanceOf(to) / 1e18;\\r\\n\\r\\n    emit Deposit(msg.sender, to, amount, fee);\\r\\n  }\\r\\n\\r\\n  event Distribute(uint256 amount, int256 keepProfit, uint256 rewardPerShare);\\r\\n  function distribute(uint256 amount) public onlyNft {\\r\\n    // NFT contract is responsible for transferring base amount\\r\\n\\r\\n    if (amount == 0) revert Zero();\\r\\n    if (expiration != 0 && block.timestamp > expiration) revert Expired(expiration);\\r\\n\\r\\n    uint256 distributeAmount = amount * distributionRatio / 10000;\\r\\n\\r\\n    keepProfit += int256(amount - distributeAmount);\\r\\n\\r\\n    if (masterchefRatio > 0) {\\r\\n      uint256 masterchefAmount = amount * masterchefRatio / 10000;\\r\\n      baseToken.safeTransfer(address(masterchef), masterchefAmount);\\r\\n      masterchef.distribute(masterchefAmount);\\r\\n      keepProfit -= int256(masterchefAmount);\\r\\n    }\\r\\n\\r\\n    if (totalSupply() == 0) {\\r\\n      // Refund distributeAmount back to the pool\\r\\n      keepProfit += int256(distributeAmount);\\r\\n    } else {\\r\\n      rewardPerShare += distributeAmount * 1e18 / totalSupply();\\r\\n    }\\r\\n\\r\\n    emit Distribute(amount, keepProfit, rewardPerShare);\\r\\n  }\\r\\n\\r\\n  event Claim(uint256 amount, int256 keepProfit);\\r\\n  function claim(address to, uint256 amount) public onlyNft {\\r\\n    if (amount == 0) revert Zero();\\r\\n    if (expiration != 0 && block.timestamp > expiration) revert Expired(expiration);\\r\\n\\r\\n    keepProfit -= int256(amount);\\r\\n    if (keepProfit < -int256(totalSupply())) revert OutOfReserve();\\r\\n    baseToken.safeTransfer(to, amount);\\r\\n    emit Claim(amount, keepProfit);\\r\\n  }\\r\\n\\r\\n  event Redeem(address indexed redeemer, uint256 amount, uint256 total);\\r\\n  function redeem(uint256 amount) public {\\r\\n    if (amount == 0) revert Zero();\\r\\n    // If no expiration -> can't redeem\\r\\n    if (expiration == 0 || block.timestamp <= expiration) revert NotExpired(expiration);\\r\\n\\r\\n    if (supplyAtExpired == 0) {\\r\\n      supplyAtExpired = totalSupply();\\r\\n    }\\r\\n\\r\\n    int256 supply = int256(supplyAtExpired);\\r\\n    int256 totalInt = (supply + keepProfit) * int256(amount) / supply;\\r\\n\\r\\n    if (totalInt <= 0) {\\r\\n      revert WithdrawBug();\\r\\n    }\\r\\n    \\r\\n    uint256 total = uint256(totalInt);\\r\\n\\r\\n    _burn(msg.sender, amount);\\r\\n    baseToken.safeTransfer(msg.sender, total);\\r\\n\\r\\n    emit Redeem(msg.sender, amount, total);\\r\\n  }\\r\\n\\r\\n  // Take loss but not take profit\\r\\n  event Withdraw(address indexed withdrawer, uint256 amount, uint256 total);\\r\\n  function withdraw(uint256 amount) public {\\r\\n    if (amount == 0) revert Zero();\\r\\n    // If expired -> use redeem instead\\r\\n    if (expiration != 0 && block.timestamp > expiration) revert Expired(expiration);\\r\\n\\r\\n    int256 supply = int256(totalSupply());\\r\\n    int256 totalInt = keepProfit >= 0 ? int256(amount) : (supply + keepProfit) * int256(amount) / supply;\\r\\n\\r\\n    if (totalInt <= 0) {\\r\\n      revert WithdrawBug();\\r\\n    }\\r\\n\\r\\n    keepProfit += int256(amount) - totalInt;\\r\\n\\r\\n    uint256 total = uint256(totalInt);\\r\\n\\r\\n    _burn(msg.sender, amount);\\r\\n    baseToken.safeTransfer(msg.sender, total);\\r\\n\\r\\n    emit Withdraw(msg.sender, amount, total);\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256\\r\\n  ) internal virtual override {\\r\\n    harvest(from);\\r\\n    harvest(to);\\r\\n  }\\r\\n\\r\\n  function _afterTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256\\r\\n  ) internal virtual override {\\r\\n    rewardDebt[from] = rewardPerShare * balanceOf(from) / 1e18;\\r\\n    rewardDebt[to] = rewardPerShare * balanceOf(to) / 1e18;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xc80d52f169d35179169a3b914a9e810b4d3429359b342692aea1f8a6c3608829\",\"license\":\"BUSL-1.1\"},\"contracts/optidomains/AttestationStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Semver\\r\\n * @notice Semver is a simple contract for managing contract versions.\\r\\n */\\r\\ncontract Semver {\\r\\n    /**\\r\\n     * @notice Contract version number (major).\\r\\n     */\\r\\n    uint256 private immutable MAJOR_VERSION;\\r\\n\\r\\n    /**\\r\\n     * @notice Contract version number (minor).\\r\\n     */\\r\\n    uint256 private immutable MINOR_VERSION;\\r\\n\\r\\n    /**\\r\\n     * @notice Contract version number (patch).\\r\\n     */\\r\\n    uint256 private immutable PATCH_VERSION;\\r\\n\\r\\n    /**\\r\\n     * @param _major Version number (major).\\r\\n     * @param _minor Version number (minor).\\r\\n     * @param _patch Version number (patch).\\r\\n     */\\r\\n    constructor(\\r\\n        uint256 _major,\\r\\n        uint256 _minor,\\r\\n        uint256 _patch\\r\\n    ) {\\r\\n        MAJOR_VERSION = _major;\\r\\n        MINOR_VERSION = _minor;\\r\\n        PATCH_VERSION = _patch;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the full semver contract version.\\r\\n     *\\r\\n     * @return Semver contract version as a string.\\r\\n     */\\r\\n    function version() public view returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    Strings.toString(MAJOR_VERSION),\\r\\n                    \\\".\\\",\\r\\n                    Strings.toString(MINOR_VERSION),\\r\\n                    \\\".\\\",\\r\\n                    Strings.toString(PATCH_VERSION)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title AttestationStation\\r\\n * @author Optimism Collective\\r\\n * @author Gitcoin\\r\\n * @notice Where attestations live.\\r\\n */\\r\\ncontract AttestationStation is Semver {\\r\\n    /**\\r\\n     * @notice Struct representing data that is being attested.\\r\\n     *\\r\\n     * @custom:field about Address for which the attestation is about.\\r\\n     * @custom:field key   A bytes32 key for the attestation.\\r\\n     * @custom:field val   The attestation as arbitrary bytes.\\r\\n     */\\r\\n    struct AttestationData {\\r\\n        address about;\\r\\n        bytes32 key;\\r\\n        bytes val;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Maps addresses to attestations. Creator => About => Key => Value.\\r\\n     */\\r\\n    mapping(address => mapping(address => mapping(bytes32 => bytes))) public attestations;\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when Attestation is created.\\r\\n     *\\r\\n     * @param creator Address that made the attestation.\\r\\n     * @param about   Address attestation is about.\\r\\n     * @param key     Key of the attestation.\\r\\n     * @param val     Value of the attestation.\\r\\n     */\\r\\n    event AttestationCreated(\\r\\n        address indexed creator,\\r\\n        address indexed about,\\r\\n        bytes32 indexed key,\\r\\n        bytes val\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @custom:semver 1.1.0\\r\\n     */\\r\\n    constructor() Semver(1, 1, 0) {}\\r\\n\\r\\n    /**\\r\\n     * @notice Allows anyone to create an attestation.\\r\\n     *\\r\\n     * @param _about Address that the attestation is about.\\r\\n     * @param _key   A key used to namespace the attestation.\\r\\n     * @param _val   An arbitrary value stored as part of the attestation.\\r\\n     */\\r\\n    function attest(\\r\\n        address _about,\\r\\n        bytes32 _key,\\r\\n        bytes memory _val\\r\\n    ) public {\\r\\n        attestations[msg.sender][_about][_key] = _val;\\r\\n\\r\\n        emit AttestationCreated(msg.sender, _about, _key, _val);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows anyone to create attestations.\\r\\n     *\\r\\n     * @param _attestations An array of attestation data.\\r\\n     */\\r\\n    function attest(AttestationData[] calldata _attestations) external {\\r\\n        uint256 length = _attestations.length;\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            AttestationData memory attestation = _attestations[i];\\r\\n\\r\\n            attest(attestation.about, attestation.key, attestation.val);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd2520b949a2f65bab98ede2993d156c8aa8e52dac667041788d5f1c0fc524931\",\"license\":\"MIT\"},\"contracts/optidomains/ENS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface ENS {\\r\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\r\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\r\\n\\r\\n    // Logged when the owner of a node transfers ownership to a new account.\\r\\n    event Transfer(bytes32 indexed node, address owner);\\r\\n\\r\\n    // Logged when the resolver for a node changes.\\r\\n    event NewResolver(bytes32 indexed node, address resolver);\\r\\n\\r\\n    // Logged when the TTL of a node changes\\r\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setResolver(bytes32 node, address resolver) external;\\r\\n\\r\\n    function setOwner(bytes32 node, address owner) external;\\r\\n\\r\\n    function setTTL(bytes32 node, uint64 ttl) external;\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function owner(bytes32 node) external view returns (address);\\r\\n\\r\\n    function resolver(bytes32 node) external view returns (address);\\r\\n\\r\\n    function ttl(bytes32 node) external view returns (uint64);\\r\\n\\r\\n    function recordExists(bytes32 node) external view returns (bool);\\r\\n\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x557cc4fae8d5d328ee09bc47707f92a7ac8c4130aa6aca3e78211b69bb9c6d75\",\"license\":\"MIT\"},\"contracts/optidomains/INameWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\ninterface INameWrapper is IERC1155 {\\r\\n    event NameWrapped(\\r\\n        bytes32 indexed node,\\r\\n        bytes name,\\r\\n        address owner,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    );\\r\\n\\r\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\r\\n\\r\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\r\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\r\\n\\r\\n    function ens() external view returns (address);\\r\\n\\r\\n    function registrar() external view returns (address);\\r\\n\\r\\n    function metadataService() external view returns (address);\\r\\n\\r\\n    function names(bytes32) external view returns (bytes memory);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function upgradeContract() external view returns (address);\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n\\r\\n    function wrap(\\r\\n        bytes calldata name,\\r\\n        address wrappedOwner,\\r\\n        address resolver\\r\\n    ) external;\\r\\n\\r\\n    function wrapETH2LD(\\r\\n        string calldata label,\\r\\n        address wrappedOwner,\\r\\n        uint16 ownerControlledFuses,\\r\\n        address resolver\\r\\n    ) external returns (uint64 expires);\\r\\n\\r\\n    function registerAndWrapETH2LD(\\r\\n        string calldata label,\\r\\n        address wrappedOwner,\\r\\n        uint256 duration,\\r\\n        address resolver,\\r\\n        uint16 ownerControlledFuses\\r\\n    ) external returns (uint256 registrarExpiry);\\r\\n\\r\\n    function renew(\\r\\n        uint256 labelHash,\\r\\n        uint256 duration\\r\\n    ) external returns (uint256 expires);\\r\\n\\r\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\r\\n\\r\\n    function unwrapETH2LD(\\r\\n        bytes32 label,\\r\\n        address newRegistrant,\\r\\n        address newController\\r\\n    ) external;\\r\\n\\r\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\r\\n\\r\\n    function setFuses(\\r\\n        bytes32 node,\\r\\n        uint16 ownerControlledFuses\\r\\n    ) external returns (uint32 newFuses);\\r\\n\\r\\n    function setChildFuses(\\r\\n        bytes32 parentNode,\\r\\n        bytes32 labelhash,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        string calldata label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        string calldata label,\\r\\n        address newOwner,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function extendExpiry(\\r\\n        bytes32 node,\\r\\n        bytes32 labelhash,\\r\\n        uint64 expiry\\r\\n    ) external returns (uint64);\\r\\n\\r\\n    function canModifyName(\\r\\n        bytes32 node,\\r\\n        address addr\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function setResolver(bytes32 node, address resolver) external;\\r\\n\\r\\n    function setTTL(bytes32 node, uint64 ttl) external;\\r\\n\\r\\n    function ownerOf(uint256 id) external view returns (address owner);\\r\\n\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    function getApproved(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function getData(\\r\\n        uint256 id\\r\\n    ) external view returns (address, uint32, uint64);\\r\\n\\r\\n    function setMetadataService(address _metadataService) external;\\r\\n\\r\\n    function uri(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    function setUpgradeContract(address _upgradeAddress) external;\\r\\n\\r\\n    function allFusesBurned(\\r\\n        bytes32 node,\\r\\n        uint32 fuseMask\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function isWrapped(bytes32) external view returns (bool);\\r\\n\\r\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\r\\n}\",\"keccak256\":\"0xff639dcfd751daeec98e9a5b45af19042c46a95f10001a982c3bcc3cd4a10b91\",\"license\":\"MIT\"},\"contracts/optidomains/INameWrapperRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\nimport {ENS} from \\\"./ENS.sol\\\";\\r\\nimport {INameWrapper} from \\\"./INameWrapper.sol\\\";\\r\\n\\r\\ninterface INameWrapperRegistry {\\r\\n  function ens() external view returns(ENS);\\r\\n  function attestation() external view returns(address);\\r\\n  function forward(INameWrapper wrapper) external view returns(INameWrapper);\\r\\n  function backward(INameWrapper wrapper) external view returns(INameWrapper);\\r\\n  function isNameWrapper(address wrapper) external view returns(bool);\\r\\n  function ownerOf(bytes32 node) external view returns(address);\\r\\n\\r\\n  function upgrade(INameWrapper _old, INameWrapper _new) external;\\r\\n  function setAttestation(address _attestation) external;\\r\\n}\\r\\n\\r\\ninterface IHasNameWrapperRegistry {\\r\\n  function registry() external view returns(INameWrapperRegistry);\\r\\n}\",\"keccak256\":\"0xd59467f1364beaed302dbbb7a06233b3106260ec5f89adbfbc895647e5a6b52b\",\"license\":\"MIT\"},\"contracts/optidomains/IOptiDomainsAttestation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\nimport \\\"./AttestationStation.sol\\\";\\r\\nimport \\\"./INameWrapperRegistry.sol\\\";\\r\\n\\r\\ninterface IOptiDomainsAttestation {\\r\\n  function registry() external view returns(INameWrapperRegistry);\\r\\n  function attestationStation() external view returns(AttestationStation);\\r\\n  function attestationActivated() external view returns(bool);\\r\\n\\r\\n  function readVersion(bytes32 node) external view returns(uint64);\\r\\n  function readAttestation(address creator, bytes32 node, bytes32 key) external view returns(bytes memory);\\r\\n  function readAttestation(bytes32 node, bytes32 key) external view returns(bytes memory);\\r\\n  function readAttestationNV(address creator, bytes32 node, bytes32 key) external view returns(bytes memory);\\r\\n\\r\\n  function buildAttestationData(bytes32 node, bytes32 key, uint256 flags, bytes memory value) external view returns(AttestationStation.AttestationData[] memory att);\\r\\n  function attest(bytes32 node, bytes32 key, bytes memory value) external;\\r\\n  function increaseVersion(bytes32 node) external;\\r\\n}\",\"keccak256\":\"0x422ada9b8ef60e3fd2bd7d44c522d649e586f6309a33c8214c51a2648d5a8b91\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101808060405234620002295760e08162001f1b80380380916200002482856200022e565b833981010312620002295780516001600160a01b039190828116810362000229576020820151604083015193808516850362000229576060840151818116810362000229576080850151958287168703620002295760a0860151958387168703620002295760c001519483861680870362000229576020926004916000958654923360018060a01b03198516178855604051998a9687958b3391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08c80a360805260a05260c05260e0526101009a8b52610120998a526101609889526332d0577160e11b82525afa9283156200021c578193620001cf575b50505061014090815260405192611cb2948562000269863960805185505060a05185818161014001528181610f050152611280015260c05185818161050901528181610a4d01528181610f7c0152611236015260e051858181610fd101526117760152518481816103c2015281816107e4015261152201525183818161040601526115b901525182818161064401528181610b3101526111ee01525181818161028e015281816107290152610c100152f35b909192506020813d821162000213575b81620001ee602093836200022e565b810103126200020f575191821682036200020c57503880806200011d565b80fd5b5080fd5b3d9150620001df565b50604051903d90823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200025257604052565b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a71461179a5750806304f3bcec14611756578063066d872d146114875780631536c29d146112d7578063212a197e1461121257806365a0aee2146111ce578063715018a61461116757806378f5ddb314610e9f57806382dcc52a14610e545780638da5cb5b14610e2e578063a43ba55514610dd9578063a7d7f17214610a71578063a8e5fbc014610a2d578063ae65f3d4146104b8578063bc197c811461042a578063c45a0155146103e6578063c55dae63146103a2578063d26cdd201461036f578063e001e6ea1461030d578063f23a6e61146102b2578063f2d92dec1461026e578063f2fde38b146101a3578063facd743b146101665763faff50a81461012957600080fd5b3461016357806003193601126101635760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b80fd5b50346101635760203660031901126101635760ff60406020926001600160a01b0361018f611833565b168152600184522054166040519015158152f35b5034610163576020366003190112610163576101bd611833565b6101c5611982565b6001600160a01b0380911690811561021a57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461016357806003193601126101635760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101635760a0366003190112610163576102cc611833565b506102d561181d565b5060843567ffffffffffffffff8111610309576102f6903690600401611964565b5060405163f23a6e6160e01b8152602090f35b5080fd5b503461016357602036600319011261016357604060c091600435815260036020522080549060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b5034610163576020366003190112610163576001600160a01b036040602092600435815260048452205416604051908152f35b503461016357806003193601126101635760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461016357806003193601126101635760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101635760a036600319011261016357610444611833565b5061044d61181d565b5067ffffffffffffffff6044358181116104b45761046f9036906004016118b3565b506064358181116104b4576104889036906004016118b3565b50608435908111610309576104a1903690600401611964565b5060405163bc197c8160e01b8152602090f35b8280fd5b50346101635760a03660031901126101635760443567ffffffffffffffff8111610309576104ea9036906004016117ef565b90602435835260026020526040832054156109f7576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166040516331a9108f60e11b81526004356004820152602081602481855afa9081156109ec5785916109ae575b506301e133804201421161099a5761059e859260209260405194858094819363632c704360e11b835267ffffffffffffffff6301e13380420116908b8b600435600487016119fb565b03925af1801561091c5761096a575b506024358352600260205260408320546001604085200154604051916105d283611849565b602435835260208301526040820152606435606082015260056080820185815260a08301906084358252600435875260036020526060604088209480518655602081015160018701556040810151600287015501516003850155516004840155519101558261071d6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016826106b86106c6604083206040519283916020830191909160a0600560c083019480548452600181015460208501526002810154604085015260038101546060850152600481015460808501520154910152565b03601f198101835282611879565b60405180948192634e60455360e11b835260043560048401527fe4c10e58a176748dda145aa57e6abec4c4e6c685fb8555cbc8713ba02d654c82602484015260046044840152608060648401526084830190611ba5565b03816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa91821561095f57839261093b575b50803b156104b4576040516305eb5ea160e41b815291839183918290849082906107869060048301611bca565b03925af180156108d557610927575b5050602435835260026020526001600160a01b03600260408520015416604051906323b872dd60e01b825233600483015260248201526084356044820152602081606481876001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1801561091c576108e0575b5060243583526002602052826001600160a01b03600260408320015416803b15610309578180916024604051809481936391c05b0b60e01b835260843560048401525af180156108d5576108c1575b50507fb8bd2868865b974a919a9842a11870a45a184ceed24623d61e47e794cfbb20ea916108ab6040519283926004358452602435602085015260a0604085015260a08401916119da565b606435606083015260843560808301520390a180f35b6108ca90611865565b6104b4578238610860565b6040513d84823e3d90fd5b6020813d602011610914575b816108f960209383611879565b810103126109105751801515036104b45738610811565b8380fd5b3d91506108ec565b6040513d86823e3d90fd5b61093090611865565b6104b4578238610795565b6109589192503d8085833e6109508183611879565b810190611a76565b9038610759565b6040513d85823e3d90fd5b602090813d8311610993575b6109808183611879565b8101031261098e57386105ad565b600080fd5b503d610976565b634e487b7160e01b85526011600452602485fd5b90506020813d6020116109e4575b816109c960209383611879565b810103126109e0576109da90611a3f565b38610555565b8480fd5b3d91506109bc565b6040513d87823e3d90fd5b60405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606490fd5b503461016357806003193601126101635760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101635760403660031901126101635760043560243533835260206001815260ff60408520541615610da357610c0c84918483526003815260408320600581549160018101546002820154918360038201549101549260405195610ad687611849565b8652868601928352604086019081526060860191825260808601928a845260a087019485528b8a526003885260408a2096518755516001870155516002860155516003850155516004840155519101556001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000169184610ba26040822060405191829185830191909160a0600560c083019480548452600181015460208501526002810154604085015260038101546060850152600481015460808501520154910152565b0393610bb6601f1995868101845283611879565b6040518080988194634e60455360e11b83528d60048401527fe4c10e58a176748dda145aa57e6abec4c4e6c685fb8555cbc8713ba02d654c82602484015260046044840152608060648401526084830190611ba5565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa9384156109ec578594610d87575b50823b156109e05784610c6794604051809681926305eb5ea160e41b835260048301611bca565b038183875af180156109ec5787948691610d6c575b5050604080513392810192835260208301959095528101869052610cac9190849060600103908101845283611879565b803b156104b457604051633815cef760e11b81523360048201527fa898e2ebee90d5ca3818737c4ecc4182a27e1396a211657e6e7d5819bea606206024820152606060448201529183918391829084908290610d0c906064830190611ba5565b03925af180156108d557610d58575b50506040805133815260208101939093528201527f236294fdf92f6d8005b8fba01fc5d7a1964146d62f420e6423c6b9afb5c399fc90606090a180f35b610d6190611865565b6104b4578238610d1b565b610d799192939550611865565b610910579185928438610c7c565b610d9c9194503d8087833e6109508183611879565b9238610c40565b6064906040519062461bcd60e51b82526004820152600f60248201526e2737ba1030903b30b634b230ba37b960891b6044820152fd5b503461016357604036600319011261016357610df3611833565b602435908115158092036104b4576001600160a01b0390610e12611982565b1682526001602052604082209060ff8019835416911617905580f35b50346101635780600319360112610163576001600160a01b036020915416604051908152f35b503461016357602036600319011261016357604060609160043581526002602052208054906001600160a01b0360026001830154920154169060405192835260208301526040820152f35b50346101635760a03660031901126101635767ffffffffffffffff6004358181116104b457610ed29036906004016117ef565b90610edb61181d565b926044359181831683036111635760843582811161115f57610f019036906004016117ef565b50507f000000000000000000000000000000000000000000000000000000000000000093610f3036828461192d565b9283516020809501209260405190858201948886526040830152604082526060820192828410908411176111495782869183610fb68d9884604052825190209a6001600160a01b039c8d7f0000000000000000000000000000000000000000000000000000000000000000169963632c704360e11b8752605f19953092606487016119fb565b03018187875af191821561091c578592611116575b505050847f00000000000000000000000000000000000000000000000000000000000000001690803b156104b457604051630c4b7b8560e11b8152600481018690526001600160a01b03831660248201529083908290604490829084905af190811561095f578391611102575b5050803b156103095760405162d5fa2b60e81b8152600481018590526001600160a01b0387166024820152828160448183865af190811561095f5783916110ee575b5050803b15610309578180916044604051809481936338025bcf60e21b835289600484015260643560248401525af180156108d5576110da575b509160049252526040832091166bffffffffffffffffffffffff60a01b82541617905580f35b6110e390611865565b6109e05784386110b4565b6110f790611865565b61030957813861107a565b61110b90611865565b610309578138611038565b909180939450903d8411611141575b8161112f91611879565b8101031261098e578590823880610fcb565b3d9150611125565b634e487b7160e01b600052604160045260246000fd5b8680fd5b8580fd5b5034610163578060031936011261016357611180611982565b6000805473ffffffffffffffffffffffffffffffffffffffff19811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461016357806003193601126101635760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461016357806003193601126101635761122b611982565b806001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016803b156112d457819060c460405180948193637921219560e11b83523060048401523360248401527f000000000000000000000000000000000000000000000000000000000000000060448401526001606484015260a060848401528160a48401525af180156108d5576112c8575080f35b6112d190611865565b80f35b50fd5b503461016357602080600319360112610309576004359167ffffffffffffffff808411610309573660238501121561030957836004013590811161030957600560243683831b8701820111610910576113328396949661189b565b936113406040519586611879565b838552601f1961134f8561189b565b01875b818110611447575050865b8481106113d257604080518881528751818a01819052888a01928201908a8c5b82811061138a5784840385f35b855180518552808301518584015260408082015190860152606080820151908601526080808201519086015260a090810151908501529481019460c09093019260010161137d565b8083600192869a989a1b84010135875260038089528560408920604051926113f984611849565b81548452858201548c85015260028201546040850152810154606084015260048101546080840152015460a0820152611432828b611c52565b5261143d818a611c52565b500196949661135d565b879060409997995161145881611849565b88815288838201528860408201528860608201528860808201528860a082015282828c01015201979597611352565b50346101635760603660031901126101635760043560249081359160443583156117215780156116ee578285526020600481526001600160a01b03938460408820541633036116be578087526004825260408720548516956107ed1984018481116116ab576301e22d8090808202918204036116ab576370dbe8209081018091116116ab576040519763dabc945960e01b89526004890152867f00000000000000000000000000000000000000000000000000000000000000001686890152886044890152886064890152886084890152610dac60a48901528860c489015260e488015261014061010488015260096101448801526807066705c8ac2e4e8d60bb1b61016488015261018061012488015260056101848801526408a82a4a8960db1b6101a488015282876101c4818b8a7f0000000000000000000000000000000000000000000000000000000000000000165af19687156116a0578897611664575b5060405194606086019086821067ffffffffffffffff831117611652575091600295949391869360405285528185019384528660408601981688528852526040862091518255516001820155019151166bffffffffffffffffffffffff60a01b82541617905580f35b634e487b7160e01b8a52604160045289fd5b9096508281813d8311611699575b61167c8183611879565b81010312611695575185811681036116955795386115e9565b8780fd5b503d611672565b6040513d8a823e3d90fd5b634e487b7160e01b895260116004528589fd5b60405162461bcd60e51b815260048101839052600981860152682737ba1037bbb732b960b91b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c818401526b2ab735b737bbb7103cb2b0b960a11b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e818401526d155b9adb9bdddb881b595d1a1bd960921b6044820152606490fd5b503461016357806003193601126101635760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b9050346103095760203660031901126103095760043563ffffffff60e01b81168091036104b45760209250630271189760e51b81149081156117de575b5015158152f35b6301ffc9a760e01b149050386117d7565b9181601f8401121561098e5782359167ffffffffffffffff831161098e576020838186019501011161098e57565b602435906001600160a01b038216820361098e57565b600435906001600160a01b038216820361098e57565b60c0810190811067ffffffffffffffff82111761114957604052565b67ffffffffffffffff811161114957604052565b90601f8019910116810190811067ffffffffffffffff82111761114957604052565b67ffffffffffffffff81116111495760051b60200190565b81601f8201121561098e578035916118ca8361189b565b926118d86040519485611879565b808452602092838086019260051b82010192831161098e578301905b828210611902575050505090565b813581529083019083016118f4565b67ffffffffffffffff811161114957601f01601f191660200190565b92919261193982611911565b916119476040519384611879565b82948184528183011161098e578281602093846000960137010152565b9080601f8301121561098e5781602061197f9335910161192d565b90565b6001600160a01b0360005416330361199657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b908060209392818452848401376000828201840152601f01601f1916010190565b93959490611a2b67ffffffffffffffff936080956001600160a01b0393885260a0602089015260a08801916119da565b961660408501526000606085015216910152565b51906001600160a01b038216820361098e57565b60005b838110611a665750506000910152565b8181015183820152602001611a56565b90602090818382031261098e57825167ffffffffffffffff9384821161098e57019080601f8301121561098e578151611aae8161189b565b94604092611abe84519788611879565b828752858088019360051b8601019481861161098e57868101935b868510611aeb57505050505050505090565b845184811161098e57820160609081601f19828703011261098e5787519180830183811088821117611b90578952611b248b8301611a3f565b8352888201518b8401528101519086821161098e57019184603f8401121561098e578983015191611b5483611911565b611b608a519182611879565b838152868a858701011161098e57611b818c959486958c8785019101611a53565b89820152815201940193611ad9565b60246000634e487b7160e01b81526041600452fd5b90602091611bbe81518092818552858086019101611a53565b601f01601f1916010190565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410611bff575050505050505090565b909192939495968580611c41600193603f19868203018852868c516001600160a01b038151168352848101518584015201519060609081898201520190611ba5565b990194019401929594939190611bee565b8051821015611c665760209160051b010190565b634e487b7160e01b600052603260045260246000fdfea264697066735822122047ab0b421ba828c92c833ddc93de82192b1515c006cd6cd7a3ab06f81fd2760c64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a71461179a5750806304f3bcec14611756578063066d872d146114875780631536c29d146112d7578063212a197e1461121257806365a0aee2146111ce578063715018a61461116757806378f5ddb314610e9f57806382dcc52a14610e545780638da5cb5b14610e2e578063a43ba55514610dd9578063a7d7f17214610a71578063a8e5fbc014610a2d578063ae65f3d4146104b8578063bc197c811461042a578063c45a0155146103e6578063c55dae63146103a2578063d26cdd201461036f578063e001e6ea1461030d578063f23a6e61146102b2578063f2d92dec1461026e578063f2fde38b146101a3578063facd743b146101665763faff50a81461012957600080fd5b3461016357806003193601126101635760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b80fd5b50346101635760203660031901126101635760ff60406020926001600160a01b0361018f611833565b168152600184522054166040519015158152f35b5034610163576020366003190112610163576101bd611833565b6101c5611982565b6001600160a01b0380911690811561021a57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461016357806003193601126101635760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101635760a0366003190112610163576102cc611833565b506102d561181d565b5060843567ffffffffffffffff8111610309576102f6903690600401611964565b5060405163f23a6e6160e01b8152602090f35b5080fd5b503461016357602036600319011261016357604060c091600435815260036020522080549060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b5034610163576020366003190112610163576001600160a01b036040602092600435815260048452205416604051908152f35b503461016357806003193601126101635760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461016357806003193601126101635760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101635760a036600319011261016357610444611833565b5061044d61181d565b5067ffffffffffffffff6044358181116104b45761046f9036906004016118b3565b506064358181116104b4576104889036906004016118b3565b50608435908111610309576104a1903690600401611964565b5060405163bc197c8160e01b8152602090f35b8280fd5b50346101635760a03660031901126101635760443567ffffffffffffffff8111610309576104ea9036906004016117ef565b90602435835260026020526040832054156109f7576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166040516331a9108f60e11b81526004356004820152602081602481855afa9081156109ec5785916109ae575b506301e133804201421161099a5761059e859260209260405194858094819363632c704360e11b835267ffffffffffffffff6301e13380420116908b8b600435600487016119fb565b03925af1801561091c5761096a575b506024358352600260205260408320546001604085200154604051916105d283611849565b602435835260208301526040820152606435606082015260056080820185815260a08301906084358252600435875260036020526060604088209480518655602081015160018701556040810151600287015501516003850155516004840155519101558261071d6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016826106b86106c6604083206040519283916020830191909160a0600560c083019480548452600181015460208501526002810154604085015260038101546060850152600481015460808501520154910152565b03601f198101835282611879565b60405180948192634e60455360e11b835260043560048401527fe4c10e58a176748dda145aa57e6abec4c4e6c685fb8555cbc8713ba02d654c82602484015260046044840152608060648401526084830190611ba5565b03816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa91821561095f57839261093b575b50803b156104b4576040516305eb5ea160e41b815291839183918290849082906107869060048301611bca565b03925af180156108d557610927575b5050602435835260026020526001600160a01b03600260408520015416604051906323b872dd60e01b825233600483015260248201526084356044820152602081606481876001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1801561091c576108e0575b5060243583526002602052826001600160a01b03600260408320015416803b15610309578180916024604051809481936391c05b0b60e01b835260843560048401525af180156108d5576108c1575b50507fb8bd2868865b974a919a9842a11870a45a184ceed24623d61e47e794cfbb20ea916108ab6040519283926004358452602435602085015260a0604085015260a08401916119da565b606435606083015260843560808301520390a180f35b6108ca90611865565b6104b4578238610860565b6040513d84823e3d90fd5b6020813d602011610914575b816108f960209383611879565b810103126109105751801515036104b45738610811565b8380fd5b3d91506108ec565b6040513d86823e3d90fd5b61093090611865565b6104b4578238610795565b6109589192503d8085833e6109508183611879565b810190611a76565b9038610759565b6040513d85823e3d90fd5b602090813d8311610993575b6109808183611879565b8101031261098e57386105ad565b600080fd5b503d610976565b634e487b7160e01b85526011600452602485fd5b90506020813d6020116109e4575b816109c960209383611879565b810103126109e0576109da90611a3f565b38610555565b8480fd5b3d91506109bc565b6040513d87823e3d90fd5b60405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606490fd5b503461016357806003193601126101635760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101635760403660031901126101635760043560243533835260206001815260ff60408520541615610da357610c0c84918483526003815260408320600581549160018101546002820154918360038201549101549260405195610ad687611849565b8652868601928352604086019081526060860191825260808601928a845260a087019485528b8a526003885260408a2096518755516001870155516002860155516003850155516004840155519101556001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000169184610ba26040822060405191829185830191909160a0600560c083019480548452600181015460208501526002810154604085015260038101546060850152600481015460808501520154910152565b0393610bb6601f1995868101845283611879565b6040518080988194634e60455360e11b83528d60048401527fe4c10e58a176748dda145aa57e6abec4c4e6c685fb8555cbc8713ba02d654c82602484015260046044840152608060648401526084830190611ba5565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa9384156109ec578594610d87575b50823b156109e05784610c6794604051809681926305eb5ea160e41b835260048301611bca565b038183875af180156109ec5787948691610d6c575b5050604080513392810192835260208301959095528101869052610cac9190849060600103908101845283611879565b803b156104b457604051633815cef760e11b81523360048201527fa898e2ebee90d5ca3818737c4ecc4182a27e1396a211657e6e7d5819bea606206024820152606060448201529183918391829084908290610d0c906064830190611ba5565b03925af180156108d557610d58575b50506040805133815260208101939093528201527f236294fdf92f6d8005b8fba01fc5d7a1964146d62f420e6423c6b9afb5c399fc90606090a180f35b610d6190611865565b6104b4578238610d1b565b610d799192939550611865565b610910579185928438610c7c565b610d9c9194503d8087833e6109508183611879565b9238610c40565b6064906040519062461bcd60e51b82526004820152600f60248201526e2737ba1030903b30b634b230ba37b960891b6044820152fd5b503461016357604036600319011261016357610df3611833565b602435908115158092036104b4576001600160a01b0390610e12611982565b1682526001602052604082209060ff8019835416911617905580f35b50346101635780600319360112610163576001600160a01b036020915416604051908152f35b503461016357602036600319011261016357604060609160043581526002602052208054906001600160a01b0360026001830154920154169060405192835260208301526040820152f35b50346101635760a03660031901126101635767ffffffffffffffff6004358181116104b457610ed29036906004016117ef565b90610edb61181d565b926044359181831683036111635760843582811161115f57610f019036906004016117ef565b50507f000000000000000000000000000000000000000000000000000000000000000093610f3036828461192d565b9283516020809501209260405190858201948886526040830152604082526060820192828410908411176111495782869183610fb68d9884604052825190209a6001600160a01b039c8d7f0000000000000000000000000000000000000000000000000000000000000000169963632c704360e11b8752605f19953092606487016119fb565b03018187875af191821561091c578592611116575b505050847f00000000000000000000000000000000000000000000000000000000000000001690803b156104b457604051630c4b7b8560e11b8152600481018690526001600160a01b03831660248201529083908290604490829084905af190811561095f578391611102575b5050803b156103095760405162d5fa2b60e81b8152600481018590526001600160a01b0387166024820152828160448183865af190811561095f5783916110ee575b5050803b15610309578180916044604051809481936338025bcf60e21b835289600484015260643560248401525af180156108d5576110da575b509160049252526040832091166bffffffffffffffffffffffff60a01b82541617905580f35b6110e390611865565b6109e05784386110b4565b6110f790611865565b61030957813861107a565b61110b90611865565b610309578138611038565b909180939450903d8411611141575b8161112f91611879565b8101031261098e578590823880610fcb565b3d9150611125565b634e487b7160e01b600052604160045260246000fd5b8680fd5b8580fd5b5034610163578060031936011261016357611180611982565b6000805473ffffffffffffffffffffffffffffffffffffffff19811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461016357806003193601126101635760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461016357806003193601126101635761122b611982565b806001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016803b156112d457819060c460405180948193637921219560e11b83523060048401523360248401527f000000000000000000000000000000000000000000000000000000000000000060448401526001606484015260a060848401528160a48401525af180156108d5576112c8575080f35b6112d190611865565b80f35b50fd5b503461016357602080600319360112610309576004359167ffffffffffffffff808411610309573660238501121561030957836004013590811161030957600560243683831b8701820111610910576113328396949661189b565b936113406040519586611879565b838552601f1961134f8561189b565b01875b818110611447575050865b8481106113d257604080518881528751818a01819052888a01928201908a8c5b82811061138a5784840385f35b855180518552808301518584015260408082015190860152606080820151908601526080808201519086015260a090810151908501529481019460c09093019260010161137d565b8083600192869a989a1b84010135875260038089528560408920604051926113f984611849565b81548452858201548c85015260028201546040850152810154606084015260048101546080840152015460a0820152611432828b611c52565b5261143d818a611c52565b500196949661135d565b879060409997995161145881611849565b88815288838201528860408201528860608201528860808201528860a082015282828c01015201979597611352565b50346101635760603660031901126101635760043560249081359160443583156117215780156116ee578285526020600481526001600160a01b03938460408820541633036116be578087526004825260408720548516956107ed1984018481116116ab576301e22d8090808202918204036116ab576370dbe8209081018091116116ab576040519763dabc945960e01b89526004890152867f00000000000000000000000000000000000000000000000000000000000000001686890152886044890152886064890152886084890152610dac60a48901528860c489015260e488015261014061010488015260096101448801526807066705c8ac2e4e8d60bb1b61016488015261018061012488015260056101848801526408a82a4a8960db1b6101a488015282876101c4818b8a7f0000000000000000000000000000000000000000000000000000000000000000165af19687156116a0578897611664575b5060405194606086019086821067ffffffffffffffff831117611652575091600295949391869360405285528185019384528660408601981688528852526040862091518255516001820155019151166bffffffffffffffffffffffff60a01b82541617905580f35b634e487b7160e01b8a52604160045289fd5b9096508281813d8311611699575b61167c8183611879565b81010312611695575185811681036116955795386115e9565b8780fd5b503d611672565b6040513d8a823e3d90fd5b634e487b7160e01b895260116004528589fd5b60405162461bcd60e51b815260048101839052600981860152682737ba1037bbb732b960b91b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c818401526b2ab735b737bbb7103cb2b0b960a11b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e818401526d155b9adb9bdddb881b595d1a1bd960921b6044820152606490fd5b503461016357806003193601126101635760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b9050346103095760203660031901126103095760043563ffffffff60e01b81168091036104b45760209250630271189760e51b81149081156117de575b5015158152f35b6301ffc9a760e01b149050386117d7565b9181601f8401121561098e5782359167ffffffffffffffff831161098e576020838186019501011161098e57565b602435906001600160a01b038216820361098e57565b600435906001600160a01b038216820361098e57565b60c0810190811067ffffffffffffffff82111761114957604052565b67ffffffffffffffff811161114957604052565b90601f8019910116810190811067ffffffffffffffff82111761114957604052565b67ffffffffffffffff81116111495760051b60200190565b81601f8201121561098e578035916118ca8361189b565b926118d86040519485611879565b808452602092838086019260051b82010192831161098e578301905b828210611902575050505090565b813581529083019083016118f4565b67ffffffffffffffff811161114957601f01601f191660200190565b92919261193982611911565b916119476040519384611879565b82948184528183011161098e578281602093846000960137010152565b9080601f8301121561098e5781602061197f9335910161192d565b90565b6001600160a01b0360005416330361199657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b908060209392818452848401376000828201840152601f01601f1916010190565b93959490611a2b67ffffffffffffffff936080956001600160a01b0393885260a0602089015260a08801916119da565b961660408501526000606085015216910152565b51906001600160a01b038216820361098e57565b60005b838110611a665750506000910152565b8181015183820152602001611a56565b90602090818382031261098e57825167ffffffffffffffff9384821161098e57019080601f8301121561098e578151611aae8161189b565b94604092611abe84519788611879565b828752858088019360051b8601019481861161098e57868101935b868510611aeb57505050505050505090565b845184811161098e57820160609081601f19828703011261098e5787519180830183811088821117611b90578952611b248b8301611a3f565b8352888201518b8401528101519086821161098e57019184603f8401121561098e578983015191611b5483611911565b611b608a519182611879565b838152868a858701011161098e57611b818c959486958c8785019101611a53565b89820152815201940193611ad9565b60246000634e487b7160e01b81526041600452fd5b90602091611bbe81518092818552858086019101611a53565b601f01601f1916010190565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410611bff575050505050505090565b909192939495968580611c41600193603f19868203018852868c516001600160a01b038151168352848101518584015201519060609081898201520190611ba5565b990194019401929594939190611bee565b8051821015611c665760209160051b010190565b634e487b7160e01b600052603260045260246000fdfea264697066735822122047ab0b421ba828c92c833ddc93de82192b1515c006cd6cd7a3ab06f81fd2760c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1349,
        "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4132,
        "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
        "label": "isValidator",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4167,
        "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
        "label": "partnerGoal",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(PartnerGoal)4162_storage)"
      },
      {
        "astId": 4185,
        "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
        "label": "insuranceDetail",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(InsuranceDetail)4180_storage)"
      },
      {
        "astId": 4189,
        "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
        "label": "domainOwner",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(InsurancePool)6168": {
        "encoding": "inplace",
        "label": "contract InsurancePool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(InsuranceDetail)4180_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EarthRegistrarController.InsuranceDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(InsuranceDetail)4180_storage"
      },
      "t_mapping(t_bytes32,t_struct(PartnerGoal)4162_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EarthRegistrarController.PartnerGoal)",
        "numberOfBytes": "32",
        "value": "t_struct(PartnerGoal)4162_storage"
      },
      "t_struct(InsuranceDetail)4180_storage": {
        "encoding": "inplace",
        "label": "struct EarthRegistrarController.InsuranceDetail",
        "members": [
          {
            "astId": 4169,
            "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
            "label": "partner",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4171,
            "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
            "label": "goalMethod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4173,
            "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
            "label": "goalYear",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4175,
            "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
            "label": "goalTon",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4177,
            "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
            "label": "acheivedTon",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4179,
            "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
            "label": "premium",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PartnerGoal)4162_storage": {
        "encoding": "inplace",
        "label": "struct EarthRegistrarController.PartnerGoal",
        "members": [
          {
            "astId": 4156,
            "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
            "label": "method",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4158,
            "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
            "label": "year",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4161,
            "contract": "contracts/EarthRegistrarController.sol:EarthRegistrarController",
            "label": "pool",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(InsurancePool)6168"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}