{
  "address": "0x01F21de015410057C65FE8CB069021e9b3245134",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetFeeAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        }
      ],
      "name": "harvestMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_insurancePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurancePool",
      "outputs": [
        {
          "internalType": "contract InsurancePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfoDummyList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfoPidList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "emergency",
          "type": "bool"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "setFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setStartTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f8baaf45894523167e2f52c307daa91c5803b5c07095619fcdf54f843f34788",
  "receipt": {
    "to": null,
    "from": "0x35D3935C54430e5D661F253e1A1fFc147b9dDd77",
    "contractAddress": "0x01F21de015410057C65FE8CB069021e9b3245134",
    "transactionIndex": 1,
    "gasUsed": "1555917",
    "logsBloom": "0x
    "blockHash": "0xc790cf66f73c3ef1b426ac024a8f46ec572da0f4cd8c2a5411d6b877b3a6ad33",
    "transactionHash": "0x0f8baaf45894523167e2f52c307daa91c5803b5c07095619fcdf54f843f34788",
    "logs": [],
    "blockNumber": 8881054,
    "cumulativeGasUsed": "1602830",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "13e8bd079ad6e1fb5cfa36154c755e23",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"harvestMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insurancePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurancePool\",\"outputs\":[{\"internalType\":\"contract InsurancePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfoDummyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfoPidList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"emergency\",\"type\":\"bool\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Tells the address of the owner\",\"returns\":{\"_0\":\"the address of the owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InsuranceMasterchef.sol\":\"InsuranceMasterchef\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/IDevParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDevParameters {\\r\\n  function investorDevFee() external view returns(uint256);\\r\\n  function buyerDevFee() external view returns(uint256);\\r\\n  function maxBuyerFee() external view returns(uint256);\\r\\n}\",\"keccak256\":\"0x5d21af633e8648073ace9b8ffce59d2c7215c4a5bf8ddeb9890307dce78455c3\",\"license\":\"BUSL-1.1\"},\"contracts/IDistribute.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDistribute {\\r\\n  function distribute(uint256 amount) external;\\r\\n}\",\"keccak256\":\"0x006b019a5e89bcdf8b73cfb7e64d6b4ab0173123ae7b607dbce158d2820e8dd7\",\"license\":\"BUSL-1.1\"},\"contracts/InsuranceMasterchef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"./InsurancePool.sol\\\";\\r\\nimport \\\"./IDistribute.sol\\\";\\r\\n\\r\\ninterface IMintableERC20 is IERC20 {\\r\\n\\tfunction mint(address _to, uint256 _amount) external;\\r\\n}\\r\\n\\r\\ninterface ITransferable {\\r\\n\\tfunction transfer(address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\n// Note: Precaution not to add baseToken as a pool (not make any sense)\\r\\ncontract InsuranceMasterchef is ReentrancyGuardUpgradeable, IDistribute {\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\r\\n\\t// Info of each user.\\r\\n\\tstruct UserInfo {\\r\\n\\t\\tuint256 amount; // How many LP tokens the user has provided.\\r\\n\\t\\tuint256 rewardDebt; // Reward debt. See explanation below.\\r\\n\\t}\\r\\n\\r\\n\\t// Info of each pool.\\r\\n\\tstruct PoolInfo {\\r\\n\\t\\tIERC20 lpToken; // Address of LP token contract.\\r\\n\\t\\tuint256 allocPoint; // How many allocation points assigned to this pool. Percentage of reward to be distributed.\\r\\n\\t\\tuint256 lastRewardTimestamp; // Last block number that reward distribution occurs.\\r\\n\\t\\tuint256 accRewardPerShare; // Accumulated reward per share, times 1e12. See below.\\r\\n\\t\\tuint16 depositFeeBP; // Deposit fee in basis points\\r\\n\\t}\\r\\n\\r\\n\\t// The reward token\\r\\n\\tIERC20 public baseToken;\\r\\n  // Insurance pool address\\r\\n\\tInsurancePool public insurancePool;\\r\\n\\t// Deposit Fee address\\r\\n\\taddress public feeAddress;\\r\\n\\r\\n\\t// Info of each pool.\\r\\n\\tuint256[] public poolInfoPidList; // pid to massUpdatePool\\r\\n\\taddress[] public poolInfoDummyList;\\r\\n\\tmapping(uint256 => PoolInfo) public poolInfo;\\r\\n\\t// Info of each user that stakes LP tokens.\\r\\n\\tmapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\t// Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n\\tuint256 public totalAllocPoint;\\r\\n\\t// Useless but copied from a masterchef implementation\\r\\n\\tuint256 public startTimestamp;\\r\\n\\r\\n\\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\tevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\tevent SetFeeAddress(address indexed user, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Tells the address of the owner\\r\\n   * @return the address of the owner\\r\\n   */\\r\\n  function owner() public view returns(address) {\\r\\n    return OwnableUpgradeable(insurancePool).owner();\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(insurancePool.isGovernance(msg.sender), \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n\\tfunction initialize(\\r\\n    address _insurancePool,\\r\\n\\t\\taddress _baseToken\\r\\n\\t) external initializer {\\r\\n    insurancePool = InsurancePool(_insurancePool);\\r\\n\\t\\tbaseToken = IERC20(_baseToken);\\r\\n\\t\\tfeeAddress = insurancePool.owner();\\r\\n\\t\\tstartTimestamp = block.timestamp;\\r\\n\\r\\n\\t\\t__ReentrancyGuard_init();\\r\\n\\t}\\r\\n\\r\\n\\tfunction setStartTimestamp(uint256 newTimestamp) external onlyOwner {\\r\\n\\t\\trequire(block.timestamp < newTimestamp && block.timestamp < startTimestamp, \\\"already start\\\");\\r\\n\\t\\tstartTimestamp = newTimestamp;\\r\\n\\r\\n\\t\\tuint256 poolInfoPidListLength = poolInfoPidList.length;\\r\\n\\t\\tfor (uint256 i = 0; i < poolInfoPidListLength; i++) {\\r\\n\\t\\t\\tpoolInfo[poolInfoPidList[i]].lastRewardTimestamp = newTimestamp;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction poolLength() external view returns (uint256) {\\r\\n\\t\\treturn poolInfoDummyList.length;\\r\\n\\t}\\r\\n\\r\\n\\tmapping(IERC20 => bool) public poolExistence;\\r\\n\\r\\n\\tmodifier nonDuplicated(IERC20 _lpToken) {\\r\\n\\t\\trequire(poolExistence[_lpToken] == false, \\\"duplicated\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t// Add a new lp to the pool. Can only be called by the owner.\\r\\n\\tfunction add(uint256 _allocPoint, IERC20 _lpToken, uint16 _depositFeeBP) external onlyOwner nonDuplicated(_lpToken) {\\r\\n\\t\\trequire(_depositFeeBP <= 10000, \\\"invalid deposit fee basis points\\\");\\r\\n\\r\\n\\t\\tuint256 newPid = poolInfoDummyList.length;\\r\\n\\r\\n\\t\\tuint256 lastRewardTimestamp = block.timestamp > startTimestamp ? block.timestamp : startTimestamp;\\r\\n\\t\\ttotalAllocPoint = totalAllocPoint + _allocPoint;\\r\\n\\t\\tpoolExistence[_lpToken] = true;\\r\\n\\t\\tpoolInfo[newPid] = PoolInfo({\\r\\n\\t\\t    lpToken: _lpToken,\\r\\n\\t\\t    allocPoint: _allocPoint,\\r\\n\\t\\t    lastRewardTimestamp: lastRewardTimestamp,\\r\\n\\t\\t    accRewardPerShare: 0,\\r\\n\\t\\t    depositFeeBP: _depositFeeBP\\r\\n\\t\\t});\\r\\n\\t\\tpoolInfoDummyList.push(address(_lpToken));\\r\\n\\t\\tpoolInfoPidList.push(newPid);\\r\\n\\t}\\r\\n\\r\\n\\t// emergency flag use when we add invalid token address to\\r\\n\\tfunction remove(uint256 _pid, bool emergency) external onlyOwner {\\r\\n\\t\\tif (poolInfoPidList.length == 0) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\r\\n\\t\\trequire(address(pool.lpToken) != address(0), \\\"not found\\\");\\r\\n\\r\\n\\t\\tuint256 length = poolInfoPidList.length;\\r\\n\\t\\tfor (uint256 i = 0; i < length; ++i) {\\r\\n\\t\\t\\tif (poolInfoPidList[i] == _pid) {\\r\\n\\t\\t\\t\\tif (pool.allocPoint == 0 || emergency) {\\r\\n\\t\\t\\t\\t\\tpool.allocPoint = 0;\\r\\n\\t\\t\\t\\t\\tpoolInfoPidList[i] = poolInfoPidList[length - 1];\\r\\n\\t\\t\\t\\t\\tpoolInfoPidList.pop();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// Update the given pool's reward allocation point and deposit fee. Can only be called by the owner.\\r\\n\\tfunction set(uint256 _pid, uint256 _allocPoint, uint16 _depositFeeBP) external onlyOwner {\\r\\n\\t\\trequire(_depositFeeBP <= 10000, \\\"invalid deposit fee basis points\\\");\\r\\n\\r\\n\\t\\tuint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\r\\n\\t\\ttotalAllocPoint = (totalAllocPoint - prevAllocPoint) + _allocPoint;\\r\\n\\t\\tpoolInfo[_pid].allocPoint = _allocPoint;\\r\\n\\t\\tpoolInfo[_pid].depositFeeBP = _depositFeeBP;\\r\\n\\r\\n\\t\\tif (_allocPoint > 0 && prevAllocPoint == 0) {\\r\\n\\t\\t\\tuint256 length = poolInfoPidList.length;\\r\\n\\t\\t\\tbool found = false;\\r\\n\\t\\t\\tfor (uint256 i = 0; i < length; ++i) {\\r\\n\\t\\t\\t\\tif (poolInfoPidList[i] == _pid) {\\r\\n\\t\\t\\t\\t\\tfound = true;\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (!found) {\\r\\n\\t\\t\\t\\tpoolInfoPidList.push(_pid);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// View function to see pending reward on frontend.\\r\\n\\tfunction pendingReward(uint256 _pid, address _user) external view returns (uint256) {\\r\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\r\\n\\t\\tUserInfo storage user = userInfo[_pid][_user];\\r\\n\\t\\tuint256 accRewardPerShare = pool.accRewardPerShare;\\r\\n\\t\\treturn ((user.amount * accRewardPerShare) / 1e12) - user.rewardDebt;\\r\\n\\t}\\r\\n\\r\\n\\t// Update reward variables for all pools. Be careful of gas spending!\\r\\n\\tfunction distribute(uint256 _amount) public {\\r\\n    require(msg.sender == address(insurancePool), \\\"Not insurance pool\\\");\\r\\n\\t\\tuint256 length = poolInfoPidList.length;\\r\\n\\t\\tfor (uint256 i = 0; i < length; ++i) {\\r\\n\\t\\t\\tupdatePool(poolInfoPidList[i], _amount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// Update reward variables of the given pool to be up-to-date.\\r\\n\\tfunction updatePool(uint256 _pid, uint256 _amount) public {\\r\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\r\\n\\t\\tif (block.timestamp <= pool.lastRewardTimestamp) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n\\t\\tif (lpSupply == 0 || pool.allocPoint == 0) {\\r\\n\\t\\t\\tpool.lastRewardTimestamp = block.timestamp;\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tpool.accRewardPerShare += ((pool.allocPoint * _amount * 1e12) / totalAllocPoint / lpSupply);\\r\\n\\t\\tpool.lastRewardTimestamp = block.timestamp;\\r\\n\\t}\\r\\n\\r\\n\\t// Deposit LP tokens for reward allocation.\\r\\n\\tfunction deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\r\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\r\\n\\t\\tUserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n\\t\\tuint256 pending = ((user.amount * pool.accRewardPerShare) / 1e12) - user.rewardDebt;\\r\\n\\t\\tif (pending > 0) {\\r\\n\\t\\t\\tsafeRewardTransfer(msg.sender, pending);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_amount > 0) {\\r\\n\\t\\t\\tpool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n\\t\\t\\tif (pool.depositFeeBP > 0) {\\r\\n\\t\\t\\t\\tuint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\r\\n\\t\\t\\t\\tpool.lpToken.safeTransfer(feeAddress, depositFee);\\r\\n\\t\\t\\t\\tuser.amount = (user.amount + _amount) - depositFee;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tuser.amount = user.amount + _amount;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tuser.rewardDebt = (user.amount * pool.accRewardPerShare) / 1e12;\\r\\n\\t\\temit Deposit(msg.sender, _pid, _amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction harvestAll() external {\\r\\n\\t\\tuint256 length = poolInfoDummyList.length;\\r\\n\\t\\tfor (uint256 pid = 0; pid < length; ++pid) {\\r\\n\\t\\t\\tdeposit(pid, 0);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction harvestMany(uint256[] memory pids) external {\\r\\n\\t\\tuint256 length = pids.length;\\r\\n\\t\\tfor (uint256 i = 0; i < length; ++i) {\\r\\n\\t\\t\\tdeposit(pids[i], 0);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// Withdraw LP tokens.\\r\\n\\tfunction withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\r\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\r\\n\\t\\tUserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\t\\trequire(user.amount >= _amount, \\\"invalid amount\\\");\\r\\n\\r\\n\\t\\tuint256 pending = ((user.amount * pool.accRewardPerShare) / 1e12) - user.rewardDebt;\\r\\n\\t\\tif (pending > 0) {\\r\\n\\t\\t\\tsafeRewardTransfer(msg.sender, pending);\\r\\n\\t\\t}\\r\\n\\t\\tif (_amount > 0) {\\r\\n\\t\\t\\tuser.amount = user.amount - _amount;\\r\\n\\t\\t\\tpool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n\\t\\t}\\r\\n\\t\\tuser.rewardDebt = (user.amount * pool.accRewardPerShare) / 1e12;\\r\\n\\t\\temit Withdraw(msg.sender, _pid, _amount);\\r\\n\\t}\\r\\n\\r\\n\\t// Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n\\tfunction emergencyWithdraw(uint256 _pid) external nonReentrant {\\r\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\r\\n\\t\\tUserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\t\\tuint256 amount = user.amount;\\r\\n\\t\\tuser.amount = 0;\\r\\n\\t\\tuser.rewardDebt = 0;\\r\\n\\t\\tpool.lpToken.safeTransfer(address(msg.sender), amount);\\r\\n\\t\\temit EmergencyWithdraw(msg.sender, _pid, amount);\\r\\n\\t}\\r\\n\\r\\n\\t// Safe reward transfer function, just in case if rounding error causes pool to not have enough reward.\\r\\n\\tfunction safeRewardTransfer(address _to, uint256 _amount) internal {\\r\\n\\t\\tuint256 rewardBal = baseToken.balanceOf(address(this));\\r\\n\\r\\n\\t\\tif (_amount > rewardBal) {\\r\\n\\t\\t\\tbaseToken.safeTransfer(_to, rewardBal);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tbaseToken.safeTransfer(_to, _amount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction setFeeAddress(address _feeAddress) external onlyOwner {\\r\\n\\t\\tfeeAddress = _feeAddress;\\r\\n\\t\\temit SetFeeAddress(msg.sender, _feeAddress);\\r\\n\\t}\\r\\n}\",\"keccak256\":\"0x08ee82b7acc84eb3821c872a342183247cf4fa4bdd4709d286e56bf3fa71dd0c\",\"license\":\"MIT\"},\"contracts/InsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IDistribute.sol\\\";\\r\\nimport \\\"./IDevParameters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nerror InvalidPercentage();\\r\\nerror Zero();\\r\\nerror Expired(uint256 expiration);\\r\\nerror NotExpired(uint256 expiration);\\r\\nerror DepositLimit();\\r\\nerror OutOfReserve();\\r\\nerror WithdrawBug();\\r\\n\\r\\ninterface INftInitializer {\\r\\n  function initialize(\\r\\n    address _pool,\\r\\n    IERC20 _baseToken,\\r\\n    string memory _tokenName,\\r\\n    string memory _tokenSymbol\\r\\n  ) external;\\r\\n}\\r\\n\\r\\ninterface IMasterchefInitializer is IDistribute {\\r\\n\\tfunction initialize(\\r\\n    address _insurancePool,\\r\\n\\t\\taddress _baseToken\\r\\n\\t) external;\\r\\n}\\r\\n\\r\\ncontract InsurancePool is ERC20Upgradeable, OwnableUpgradeable, IDistribute {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  address public immutable nftImplementation;\\r\\n  address public immutable masterchefImplementation;\\r\\n\\r\\n  IERC20 public baseToken;\\r\\n\\r\\n  address public factory;\\r\\n  address public nft;\\r\\n  IMasterchefInitializer public masterchef;\\r\\n\\r\\n  uint256 public rewardPerShare;\\r\\n  mapping(address => uint256) public rewardDebt; \\r\\n\\r\\n  uint256 public buyPercentageFee;\\r\\n  uint256 public depositPercentageFee;\\r\\n  uint256 public depositLimit;\\r\\n\\r\\n  uint256 public distributionRatio;\\r\\n  uint256 public masterchefRatio;\\r\\n\\r\\n  uint256 public expiration;\\r\\n\\r\\n  // This track profit of token stored in the insurance\\r\\n  int256 public keepProfit;\\r\\n\\r\\n  // in BPS unit\\r\\n  uint256 private investorDevFee;\\r\\n\\r\\n  uint256 public supplyAtExpired;\\r\\n\\r\\n  modifier onlyNft {\\r\\n    // TODO: HACKATHON only: Remove security for time trade off\\r\\n    // require(msg.sender == nft, \\\"Not NFT\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function isGovernance(address addr) public view returns(bool) {\\r\\n    return addr == owner() || addr == OwnableUpgradeable(factory).owner();\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance {\\r\\n    require(isGovernance(msg.sender), \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    address _nftImplementation,\\r\\n    address _masterchefImplementation\\r\\n  ) {\\r\\n    nftImplementation = _nftImplementation;\\r\\n    masterchefImplementation = _masterchefImplementation;\\r\\n  }\\r\\n\\r\\n  function getInvestorDevFee() public view returns(uint256) {\\r\\n    if (investorDevFee == 10001) {\\r\\n      return IDevParameters(factory).investorDevFee();\\r\\n    }\\r\\n    return investorDevFee;\\r\\n  }\\r\\n\\r\\n  event UpdateInvestorDevFee(uint256 newFeeBps);\\r\\n  function updateInvestorDevFee(uint256 feeBps) public {\\r\\n    require(msg.sender == OwnableUpgradeable(factory).owner(), \\\"Not dev\\\");\\r\\n    require(feeBps <= 10001, \\\"Invalid fee\\\");\\r\\n    investorDevFee = feeBps;\\r\\n    emit UpdateInvestorDevFee(feeBps);\\r\\n  }\\r\\n\\r\\n  event PoolInitialize(address indexed owner, address indexed nftContract, address indexed masterchefContract, uint256 expiration);\\r\\n  function initialize(\\r\\n    address _owner,\\r\\n    IERC20 _baseToken,\\r\\n    uint256 _buyPercentageFee,\\r\\n    uint256 _depositPercentageFee,\\r\\n    uint256 _depositLimit,\\r\\n    uint256 _distributionRatio,\\r\\n    uint256 _masterchefRatio,\\r\\n    uint256 _expiration,\\r\\n    string memory _tokenName,\\r\\n    string memory _tokenSymbol\\r\\n  ) external initializer {\\r\\n    if (!(_distributionRatio <= 10000 && _masterchefRatio <= 10000 && _depositPercentageFee <= 10000 && 10000 - _distributionRatio - _masterchefRatio >= 0)) {\\r\\n      revert InvalidPercentage();\\r\\n    }\\r\\n\\r\\n    investorDevFee = 10001;\\r\\n    \\r\\n    factory = msg.sender;\\r\\n\\r\\n    if (IDevParameters(factory).buyerDevFee() + _buyPercentageFee > IDevParameters(factory).maxBuyerFee()) {\\r\\n      revert InvalidPercentage();\\r\\n    }\\r\\n\\r\\n    nft = Clones.clone(nftImplementation);\\r\\n    INftInitializer(nft).initialize(address(this), _baseToken, _tokenName, _tokenSymbol);\\r\\n\\r\\n    masterchef = IMasterchefInitializer(Clones.clone(masterchefImplementation));\\r\\n    masterchef.initialize(address(this), address(_baseToken));\\r\\n\\r\\n    baseToken = _baseToken;\\r\\n\\r\\n    buyPercentageFee = _buyPercentageFee;\\r\\n    depositPercentageFee = _depositPercentageFee;\\r\\n    depositLimit = _depositLimit;\\r\\n\\r\\n    distributionRatio = _distributionRatio;\\r\\n    masterchefRatio = _masterchefRatio;\\r\\n\\r\\n    expiration = _expiration;\\r\\n\\r\\n    _transferOwnership(_owner);\\r\\n    __ERC20_init(_tokenName, _tokenSymbol);\\r\\n\\r\\n    emit PoolInitialize(_owner, address(nft), address(masterchef), _expiration);\\r\\n  }\\r\\n\\r\\n  function getParameters() public view returns(\\r\\n    address _owner,\\r\\n    IERC20 _baseToken,\\r\\n    uint256 _buyPercentageFee,\\r\\n    uint256 _depositPercentageFee,\\r\\n    uint256 _depositLimit,\\r\\n    uint256 _distributionRatio,\\r\\n    uint256 _masterchefRatio,\\r\\n    uint256 _expiration,\\r\\n    string memory _tokenName,\\r\\n    string memory _tokenSymbol\\r\\n  ) {\\r\\n    _owner = owner();\\r\\n    _baseToken = baseToken;\\r\\n    _buyPercentageFee = buyPercentageFee;\\r\\n    _depositPercentageFee = depositPercentageFee;\\r\\n    _depositLimit = depositLimit;\\r\\n    _distributionRatio = distributionRatio;\\r\\n    _masterchefRatio = masterchefRatio;\\r\\n    _expiration = expiration;\\r\\n    _tokenName = name();\\r\\n    _tokenSymbol = symbol();\\r\\n  }\\r\\n\\r\\n  event SetDepositLimit(uint256 newLimit);\\r\\n  function setDepositLimit(uint256 newLimit) public onlyGovernance {\\r\\n    depositLimit = newLimit;\\r\\n    emit SetDepositLimit(newLimit);\\r\\n  }\\r\\n\\r\\n  event SetBuyPercentageFee(uint256 newPercentageFee);\\r\\n  function setBuyPercentageFee(uint256 newPercentageFee) public onlyGovernance {\\r\\n    if (IDevParameters(factory).buyerDevFee() + newPercentageFee > IDevParameters(factory).maxBuyerFee()) {\\r\\n      revert InvalidPercentage();\\r\\n    }\\r\\n    buyPercentageFee = newPercentageFee;\\r\\n    emit SetBuyPercentageFee(newPercentageFee);\\r\\n  }\\r\\n\\r\\n  event SetDepositPercentageFee(uint256 newPercentageFee);\\r\\n  function setDepositPercentageFee(uint256 newPercentageFee) public onlyGovernance {\\r\\n    if (newPercentageFee > 10000) revert InvalidPercentage();\\r\\n    depositPercentageFee = newPercentageFee;\\r\\n    emit SetDepositPercentageFee(newPercentageFee);\\r\\n  }\\r\\n\\r\\n  event SetDistributionRatio(uint256 newRatio);\\r\\n  function setDistributionRatio(uint256 newRatio) public onlyGovernance {\\r\\n    if (newRatio > 10000) revert InvalidPercentage();\\r\\n    distributionRatio = newRatio;\\r\\n    emit SetDistributionRatio(newRatio);\\r\\n  }\\r\\n\\r\\n  event SetMasterchefRatio(uint256 newRatio);\\r\\n  function setMasterchefRatio(uint256 newRatio) public onlyGovernance {\\r\\n    if (newRatio > 10000) revert InvalidPercentage();\\r\\n    masterchefRatio = newRatio;\\r\\n    emit SetMasterchefRatio(newRatio);\\r\\n  }\\r\\n\\r\\n  function getPendingReward(address wallet) public view returns(uint256) {\\r\\n    uint256 rewardFromShare = rewardPerShare * balanceOf(wallet) / 1e18;\\r\\n    uint256 amount = rewardFromShare - rewardDebt[wallet];\\r\\n    return amount;\\r\\n  }\\r\\n\\r\\n  event Harvest(address to, uint256 amount);\\r\\n  function harvest(address to) public {\\r\\n    if (to != address(0)) {\\r\\n      uint256 rewardFromShare = rewardPerShare * balanceOf(to) / 1e18;\\r\\n      uint256 amount = rewardFromShare - rewardDebt[to];\\r\\n      baseToken.safeTransfer(to, amount);\\r\\n      rewardDebt[to] = rewardFromShare;\\r\\n      emit Harvest(to, amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  event Deposit(address indexed payer, address indexed to, uint256 amount, uint256 fee);\\r\\n  function deposit(address to, uint256 amount) public {\\r\\n    if (amount == 0) revert Zero();\\r\\n    if (expiration != 0 && block.timestamp > expiration) revert Expired(expiration);\\r\\n\\r\\n    // Note: To pause deposit, set deposit limit to <= total supply but not zero\\r\\n    if (depositLimit != 0 && depositLimit + amount > totalSupply()) revert DepositLimit();\\r\\n\\r\\n    harvest(to);\\r\\n\\r\\n    baseToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n    uint256 fee = amount * depositPercentageFee * (10000 - getInvestorDevFee()) / 1e8;\\r\\n    uint256 devFee = amount * depositPercentageFee * getInvestorDevFee() / 1e8;\\r\\n\\r\\n    baseToken.safeTransfer(owner(), fee);\\r\\n    baseToken.safeTransfer(OwnableUpgradeable(factory).owner(), devFee);\\r\\n\\r\\n    _mint(to, amount - fee - devFee);\\r\\n\\r\\n    rewardDebt[to] = rewardPerShare * balanceOf(to) / 1e18;\\r\\n\\r\\n    emit Deposit(msg.sender, to, amount, fee);\\r\\n  }\\r\\n\\r\\n  event Distribute(uint256 amount, int256 keepProfit, uint256 rewardPerShare);\\r\\n  function distribute(uint256 amount) public onlyNft {\\r\\n    // NFT contract is responsible for transferring base amount\\r\\n\\r\\n    if (amount == 0) revert Zero();\\r\\n    if (expiration != 0 && block.timestamp > expiration) revert Expired(expiration);\\r\\n\\r\\n    uint256 distributeAmount = amount * distributionRatio / 10000;\\r\\n\\r\\n    keepProfit += int256(amount - distributeAmount);\\r\\n\\r\\n    if (masterchefRatio > 0) {\\r\\n      uint256 masterchefAmount = amount * masterchefRatio / 10000;\\r\\n      baseToken.safeTransfer(address(masterchef), masterchefAmount);\\r\\n      masterchef.distribute(masterchefAmount);\\r\\n      keepProfit -= int256(masterchefAmount);\\r\\n    }\\r\\n\\r\\n    if (totalSupply() == 0) {\\r\\n      // Refund distributeAmount back to the pool\\r\\n      keepProfit += int256(distributeAmount);\\r\\n    } else {\\r\\n      rewardPerShare += distributeAmount * 1e18 / totalSupply();\\r\\n    }\\r\\n\\r\\n    emit Distribute(amount, keepProfit, rewardPerShare);\\r\\n  }\\r\\n\\r\\n  event Claim(uint256 amount, int256 keepProfit);\\r\\n  function claim(address to, uint256 amount) public onlyNft {\\r\\n    if (amount == 0) revert Zero();\\r\\n    if (expiration != 0 && block.timestamp > expiration) revert Expired(expiration);\\r\\n\\r\\n    keepProfit -= int256(amount);\\r\\n    if (keepProfit < -int256(totalSupply())) revert OutOfReserve();\\r\\n    baseToken.safeTransfer(to, amount);\\r\\n    emit Claim(amount, keepProfit);\\r\\n  }\\r\\n\\r\\n  event Redeem(address indexed redeemer, uint256 amount, uint256 total);\\r\\n  function redeem(uint256 amount) public {\\r\\n    if (amount == 0) revert Zero();\\r\\n    // If no expiration -> can't redeem\\r\\n    if (expiration == 0 || block.timestamp <= expiration) revert NotExpired(expiration);\\r\\n\\r\\n    if (supplyAtExpired == 0) {\\r\\n      supplyAtExpired = totalSupply();\\r\\n    }\\r\\n\\r\\n    int256 supply = int256(supplyAtExpired);\\r\\n    int256 totalInt = (supply + keepProfit) * int256(amount) / supply;\\r\\n\\r\\n    if (totalInt <= 0) {\\r\\n      revert WithdrawBug();\\r\\n    }\\r\\n    \\r\\n    uint256 total = uint256(totalInt);\\r\\n\\r\\n    _burn(msg.sender, amount);\\r\\n    baseToken.safeTransfer(msg.sender, total);\\r\\n\\r\\n    emit Redeem(msg.sender, amount, total);\\r\\n  }\\r\\n\\r\\n  // Take loss but not take profit\\r\\n  event Withdraw(address indexed withdrawer, uint256 amount, uint256 total);\\r\\n  function withdraw(uint256 amount) public {\\r\\n    if (amount == 0) revert Zero();\\r\\n    // If expired -> use redeem instead\\r\\n    if (expiration != 0 && block.timestamp > expiration) revert Expired(expiration);\\r\\n\\r\\n    int256 supply = int256(totalSupply());\\r\\n    int256 totalInt = keepProfit >= 0 ? int256(amount) : (supply + keepProfit) * int256(amount) / supply;\\r\\n\\r\\n    if (totalInt <= 0) {\\r\\n      revert WithdrawBug();\\r\\n    }\\r\\n\\r\\n    keepProfit += int256(amount) - totalInt;\\r\\n\\r\\n    uint256 total = uint256(totalInt);\\r\\n\\r\\n    _burn(msg.sender, amount);\\r\\n    baseToken.safeTransfer(msg.sender, total);\\r\\n\\r\\n    emit Withdraw(msg.sender, amount, total);\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256\\r\\n  ) internal virtual override {\\r\\n    harvest(from);\\r\\n    harvest(to);\\r\\n  }\\r\\n\\r\\n  function _afterTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256\\r\\n  ) internal virtual override {\\r\\n    rewardDebt[from] = rewardPerShare * balanceOf(from) / 1e18;\\r\\n    rewardDebt[to] = rewardPerShare * balanceOf(to) / 1e18;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xc80d52f169d35179169a3b914a9e810b4d3429359b342692aea1f8a6c3608829\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611b28908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918263065392751461104857508163081e3eda146110295781631526fe2714610fc957816317caf6f114610faa57816324bcb38c14610e705781634127535814610e48578163441a3e7014610d1a578163485cc95514610b4e5781635312ea8e14610ac1578163544977ff14610a695781636e1d6e9a14610a1b5781638705fcd4146109795781638da5cb5b146108f35781638ed955b91461083b57816391c05b0b146107a157816393f1a40b1461075557816396ed7f891461073a57816398969e82146106ce578163ab2adc00146106a6578163c44bef75146105a3578163c55dae631461057b578163cbd258b51461053f578163d5f615c61461049c578163dc640ac91461030b578163e2bbb15814610164575063e6fd48bc1461014357600080fd5b34610160578160031936011261016057602090603b549051908152f35b5080fd5b83833461016057610174366112c6565b909161017e6117a3565b828452603860205280842060396020528185203386526020526101b6828620805490600384019164e8d4a51000938491845490611653565b04936101c86001830195865490611500565b806102fb575b5086610216575b505490546101e291611653565b049055519081527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1560203392a36001805580f35b805486516323b872dd60e01b602082015233602482015230604482015260648082018a905281526001600160a01b0391821660a0820167ffffffffffffffff8111838210176102e75791610276918a9b9c9d9e936101e2999a9b52611842565b8201805461ffff93908b908516156102d0576127106102a085926102c1976102b196541690611653565b0493849254169060355416906117f9565b6102bc8984546114b3565b611500565b81555b889796959493926101d5565b925050506102e0915082546114b3565b81556102c4565b50634e487b7160e01b8c5260418d5260248cfd5b6103059033611a53565b8a6101ce565b90503461049857602091826003193601126104945767ffffffffffffffff9282358481116104905736602382011215610490578084013594851161047d5760059085821b9084519661035f85840189611329565b875283870160248093830101913683116104795783869101915b8383106104695750505050855194875b868110610394578880f35b875181101561045757808561044292861b8a0101516103b16117a3565b808b5260388752878b209060398852888c20338d528852888c20916103ea61040e6003855493019264e8d4a51000928391855490611653565b04926001956103fe87820195865490611500565b80610447575b5054905490611653565b04905588518c81527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15893392a38055611443565b610389565b6104519033611a53565b38610404565b50634e487b7160e01b88526032905286fd5b8235815291810191869101610379565b8980fd5b634e487b7160e01b865260418452602486fd5b8580fd5b8380fd5b8280fd5b90503461049857816003193601126104985760243590811515820361049457602460206001600160a01b03603454168551928380926337b87c3960e21b825233878301525afa9384156105365750610505936104ff918691610508575b506113f8565b3561150d565b80f35b610529915060203d811161052f575b6105218183611329565b8101906113e0565b386104f9565b503d610517565b513d86823e3d90fd5b5050346101605760203660031901126101605760ff816020936001600160a01b0361056861129f565b168152603c855220541690519015158152f35b5050346101605781600319360112610160576020906001600160a01b03603354169051908152f35b9050346104985760209182600319360112610494578135916024846001600160a01b03603454168451928380926337b87c3960e21b825233878301525afa90811561069c57906105f991879161068557506113f8565b8242108061067a575b15610649575081603b5560365492845b84811061061d578580f35b8061062a610644926112dc565b90549060031b1c8752603883528460028589200155611443565b610612565b83606492519162461bcd60e51b8352820152600d60248201526c185b1c9958591e481cdd185c9d609a1b6044820152fd5b50603b544210610602565b6105299150863d881161052f576105218183611329565b83513d88823e3d90fd5b5050346101605781600319360112610160576020906001600160a01b03603454169051908152f35b90503461049857816003193601126104985761073390600164e8d4a510006107296003866020986106fd611284565b9635815260388a528181209660398b526001600160a01b03838320911682528a52209401548454611653565b0491015490611500565b9051908152f35b83346107525761050561074c366112c6565b90611686565b80fd5b905034610498578160031936011261049857918192610772611284565b9035825260396020526001600160a01b0383832091168252602052206001815491015482519182526020820152f35b905034610498576020366003190112610498578035916001600160a01b0360345416330361080357505060365490825b8281106107dc578380f35b806107f9836107ed6107fe946112dc565b90549060031b1c611686565b611443565b6107d1565b906020606492519162461bcd60e51b83528201526012602482015271139bdd081a5b9cdd5c985b98d9481c1bdbdb60721b6044820152fd5b50503461016057816003193601126101605760375490825b82811061085e578380f35b6108ee9061086a6117a3565b8085526020603881528184872091603981528588203389528152858820926108a66108ba6003865493019264e8d4a51000928391855490611653565b04926001966103fe88820195865490611500565b0490557f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158651918983523392a38055611443565b610853565b919050346104985782600319360112610498576001600160a01b039060208260345416825194858092638da5cb5b60e01b82525afa92831561096f5760209493610940575b505191168152f35b610961919350843d8111610968575b6109598183611329565b810190611361565b9138610938565b503d61094f565b81513d86823e3d90fd5b919050346104985760203660031901126104985761099561129f565b906001600160a01b0392602084603454169160248451809481936337b87c3960e21b835233908301525afa9182156105365750906109d991859161050857506113f8565b16806bffffffffffffffffffffffff60a01b6035541617603555337fd44190acf9d04bdb5d3a1aafff7e6dee8b40b93dfb8c5d3f0eea4b9f4539c3f78380a380f35b9050346104985760203660031901126104985735603654811015610498576036602093527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b801549051908152f35b9050346104985760203660031901126104985735603754811015610498576001600160a01b03906037602094527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0154169051908152f35b905034610498576020366003190112610498576001903591610ae16117a3565b8284526038602052610b1d81852060396020528286203387526020528286209086825495838288955501556001600160a01b03339154166117f9565b519081527fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059560203392a36001805580f35b905034610498578160031936011261049857610b6861129f565b610b70611284565b9084549260ff8460081c161593848095610d0d575b8015610cf6575b15610c9c5760ff198116600117875584610c8b575b5060206001600160a01b03809316836bffffffffffffffffffffffff60a01b958287603454161760345516856033541617603355865192838092638da5cb5b60e01b82525afa908115610c81578691610c63575b501690603554161760355542603b55825490610c1f60ff8360081c16610c1a81611380565b611380565b60018055610c2b578280f35b61ff001916825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b610c7b915060203d8111610968576109598183611329565b38610bf5565b85513d88823e3d90fd5b61ffff191661010117865538610ba1565b855162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610b8c5750600160ff821614610b8c565b50600160ff821610610b85565b9190503461049857610d2b366112c6565b919092610d366117a3565b8385526038602052818520906039602052828620338752602052828620805491858310610e145750610d7c91610da791600385019164e8d4a51000948591845490611653565b0494610d8e6001830196875490611500565b80610e04575b508780610ddb575b505054905490611653565b049055519081527ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56860203392a36001805580f35b610dfd91610dea828554611500565b84556001600160a01b03339154166117f9565b3887610d9c565b610e0e9033611a53565b38610d94565b606490602086519162461bcd60e51b8352820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152fd5b5050346101605781600319360112610160576020906001600160a01b03603554169051908152f35b90503461049857606036600319011261049857803591602435610e916112b5565b602460206001600160a01b03603454168551928380926337b87c3960e21b8252338a8301525afa908115610fa05761ffff9291610ed491899161050857506113f8565b16610ee3612710821115611468565b848652603860205260019384848820015493610f0a84610f0587603a54611500565b6114b3565b603a5586885260386020528386828a2001558720019061ffff1982541617905515159081610f97575b50610f3c578280f35b6036548391845b828110610f67575b50505015610f5857808280f35b610f61906114c0565b38808280f35b84610f71826112dc565b90549060031b1c14610f8b57610f8690611443565b610f43565b50915050388080610f4b565b90501538610f33565b84513d89823e3d90fd5b505034610160578160031936011261016057602090603a549051908152f35b91905034610498576020366003190112610498578060a093833581526038602052206001600160a01b038154169260018201549261ffff600284015492600385015494015416938151958652602086015284015260608301526080820152f35b5050346101605781600319360112610160576020906037549051908152f35b8385913461049857606036600319011261049857833590611067611284565b926110706112b5565b6001600160a01b03948386603454166337b87c3960e21b8252338a83015281602460209788935afa90811561127a578792916110b2918a9161125d57506113f8565b1692838752603c815260ff838820541661122e5761ffff809216926110db612710851115611468565b60375496603b54804211600014611228575042915b6110fc88603a546114b3565b603a55868a52603c8452808a20805460ff1916600117905580519360a0850167ffffffffffffffff811186821017611215579160388c94928e97969483528a87528087019b8c528287019485528c6060880196808852608089019b8c5252528b20935116976bffffffffffffffffffffffff60a01b98898554161784555160018401555160028301555160038201550191511661ffff19825416179055603754600160401b8110156112025760018101806037558110156111ef57849550603761050595527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae01918254161790556114c0565b634e487b7160e01b855260328652602485fd5b634e487b7160e01b855260418652602485fd5b634e487b7160e01b8c5260418d5260248cfd5b916110f0565b8760649184519162461bcd60e51b8352820152600a602482015269191d5c1b1a58d85d195960b21b6044820152fd5b6112749150873d891161052f576105218183611329565b8b6104f9565b84513d8a823e3d90fd5b602435906001600160a01b038216820361129a57565b600080fd5b600435906001600160a01b038216820361129a57565b6044359061ffff8216820361129a57565b604090600319011261129a576004359060243590565b6036548110156113135760366000527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b80190600090565b634e487b7160e01b600052603260045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761134b57604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261129a57516001600160a01b038116810361129a5790565b1561138757565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b9081602091031261129a5751801515810361129a5790565b156113ff57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60001981146114525760010190565b634e487b7160e01b600052601160045260246000fd5b1561146f57565b606460405162461bcd60e51b815260206004820152602060248201527f696e76616c6964206465706f7369742066656520626173697320706f696e74736044820152fd5b9190820180921161145257565b60365490600160401b82101561134b576114e38260016114fe94016036556112dc565b90919082549060031b600019811b9283911b16911916179055565b565b9190820391821161145257565b60368054801561164d576000838152603860205260408120946001600160a01b038654161561161c57815b838110611549575b50505050505050565b85611553826112dc565b919054600392831b1c14611570575061156b90611443565b611538565b9660019193949596500190815415908115611614575b50611592575b80611540565b8290556000199280840190811161160057906114e36115b36115bf936112dc565b905490881b1c916112dc565b82549081156115ec57508101926115d5846112dc565b81939154921b1b191690555538808080808061158c565b634e487b7160e01b81526031600452602490fd5b634e487b7160e01b83526011600452602483fd5b905038611586565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd08199bdd5b9960ba1b6044820152606490fd5b50505050565b8181029291811591840414171561145257565b8115611670570490565b634e487b7160e01b600052601260045260246000fd5b906000918252603860205260408220906002820192835442111561164d5760249160206001600160a01b03855416604051948580926370a0823160e01b82523060048301525afa928315611798578293611765575b5082158015611759575b611750576116f7906001850154611653565b9064e8d4a510009182810292818404149015171561173c575061172b61173592611726600393603a5490611666565b611666565b92019182546114b3565b9055429055565b634e487b7160e01b81526011600452602490fd5b50505050429055565b506001840154156116e5565b9092506020813d8211611790575b8161178060209383611329565b81010312610160575191386116db565b3d9150611773565b6040513d84823e3d90fd5b6002600154146117b4576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b916001600160a01b036040519263a9059cbb60e01b6020850152166024830152604482015260448152608081019181831067ffffffffffffffff84111761134b576114fe926040525b6001600160a01b039092919216604051604081019367ffffffffffffffff948281108682111761134b576040526020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848401526000808386829551910182855af1903d15611972573d96871161195e576118e2949596604051906118d488601f19601f8401160183611329565b81528093873d92013e61197f565b805190816118ef57505050565b82806118ff9383010191016113e0565b156119075750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b634e487b7160e01b83526041600452602483fd5b91506118e2939495506060915b919290156119e15750815115611993575090565b3b1561199c5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156119f45750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510611a3a575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350611a17565b906001600160a01b0391826033541692604051926370a0823160e01b8452306004850152602084602481885afa938415611ae657600094611ab3575b5083811115611aa757506114fe9350603354166117f9565b9250506114fe926117f9565b90936020823d8211611ade575b81611acd60209383611329565b810103126107525750519238611a8f565b3d9150611ac0565b6040513d6000823e3d90fdfea26469706673582212206a6376cb07056afd3875f4c719e6f5da0ec5de2fe059650328c15fbad8d298a164736f6c63430008110033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c918263065392751461104857508163081e3eda146110295781631526fe2714610fc957816317caf6f114610faa57816324bcb38c14610e705781634127535814610e48578163441a3e7014610d1a578163485cc95514610b4e5781635312ea8e14610ac1578163544977ff14610a695781636e1d6e9a14610a1b5781638705fcd4146109795781638da5cb5b146108f35781638ed955b91461083b57816391c05b0b146107a157816393f1a40b1461075557816396ed7f891461073a57816398969e82146106ce578163ab2adc00146106a6578163c44bef75146105a3578163c55dae631461057b578163cbd258b51461053f578163d5f615c61461049c578163dc640ac91461030b578163e2bbb15814610164575063e6fd48bc1461014357600080fd5b34610160578160031936011261016057602090603b549051908152f35b5080fd5b83833461016057610174366112c6565b909161017e6117a3565b828452603860205280842060396020528185203386526020526101b6828620805490600384019164e8d4a51000938491845490611653565b04936101c86001830195865490611500565b806102fb575b5086610216575b505490546101e291611653565b049055519081527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1560203392a36001805580f35b805486516323b872dd60e01b602082015233602482015230604482015260648082018a905281526001600160a01b0391821660a0820167ffffffffffffffff8111838210176102e75791610276918a9b9c9d9e936101e2999a9b52611842565b8201805461ffff93908b908516156102d0576127106102a085926102c1976102b196541690611653565b0493849254169060355416906117f9565b6102bc8984546114b3565b611500565b81555b889796959493926101d5565b925050506102e0915082546114b3565b81556102c4565b50634e487b7160e01b8c5260418d5260248cfd5b6103059033611a53565b8a6101ce565b90503461049857602091826003193601126104945767ffffffffffffffff9282358481116104905736602382011215610490578084013594851161047d5760059085821b9084519661035f85840189611329565b875283870160248093830101913683116104795783869101915b8383106104695750505050855194875b868110610394578880f35b875181101561045757808561044292861b8a0101516103b16117a3565b808b5260388752878b209060398852888c20338d528852888c20916103ea61040e6003855493019264e8d4a51000928391855490611653565b04926001956103fe87820195865490611500565b80610447575b5054905490611653565b04905588518c81527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15893392a38055611443565b610389565b6104519033611a53565b38610404565b50634e487b7160e01b88526032905286fd5b8235815291810191869101610379565b8980fd5b634e487b7160e01b865260418452602486fd5b8580fd5b8380fd5b8280fd5b90503461049857816003193601126104985760243590811515820361049457602460206001600160a01b03603454168551928380926337b87c3960e21b825233878301525afa9384156105365750610505936104ff918691610508575b506113f8565b3561150d565b80f35b610529915060203d811161052f575b6105218183611329565b8101906113e0565b386104f9565b503d610517565b513d86823e3d90fd5b5050346101605760203660031901126101605760ff816020936001600160a01b0361056861129f565b168152603c855220541690519015158152f35b5050346101605781600319360112610160576020906001600160a01b03603354169051908152f35b9050346104985760209182600319360112610494578135916024846001600160a01b03603454168451928380926337b87c3960e21b825233878301525afa90811561069c57906105f991879161068557506113f8565b8242108061067a575b15610649575081603b5560365492845b84811061061d578580f35b8061062a610644926112dc565b90549060031b1c8752603883528460028589200155611443565b610612565b83606492519162461bcd60e51b8352820152600d60248201526c185b1c9958591e481cdd185c9d609a1b6044820152fd5b50603b544210610602565b6105299150863d881161052f576105218183611329565b83513d88823e3d90fd5b5050346101605781600319360112610160576020906001600160a01b03603454169051908152f35b90503461049857816003193601126104985761073390600164e8d4a510006107296003866020986106fd611284565b9635815260388a528181209660398b526001600160a01b03838320911682528a52209401548454611653565b0491015490611500565b9051908152f35b83346107525761050561074c366112c6565b90611686565b80fd5b905034610498578160031936011261049857918192610772611284565b9035825260396020526001600160a01b0383832091168252602052206001815491015482519182526020820152f35b905034610498576020366003190112610498578035916001600160a01b0360345416330361080357505060365490825b8281106107dc578380f35b806107f9836107ed6107fe946112dc565b90549060031b1c611686565b611443565b6107d1565b906020606492519162461bcd60e51b83528201526012602482015271139bdd081a5b9cdd5c985b98d9481c1bdbdb60721b6044820152fd5b50503461016057816003193601126101605760375490825b82811061085e578380f35b6108ee9061086a6117a3565b8085526020603881528184872091603981528588203389528152858820926108a66108ba6003865493019264e8d4a51000928391855490611653565b04926001966103fe88820195865490611500565b0490557f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158651918983523392a38055611443565b610853565b919050346104985782600319360112610498576001600160a01b039060208260345416825194858092638da5cb5b60e01b82525afa92831561096f5760209493610940575b505191168152f35b610961919350843d8111610968575b6109598183611329565b810190611361565b9138610938565b503d61094f565b81513d86823e3d90fd5b919050346104985760203660031901126104985761099561129f565b906001600160a01b0392602084603454169160248451809481936337b87c3960e21b835233908301525afa9182156105365750906109d991859161050857506113f8565b16806bffffffffffffffffffffffff60a01b6035541617603555337fd44190acf9d04bdb5d3a1aafff7e6dee8b40b93dfb8c5d3f0eea4b9f4539c3f78380a380f35b9050346104985760203660031901126104985735603654811015610498576036602093527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b801549051908152f35b9050346104985760203660031901126104985735603754811015610498576001600160a01b03906037602094527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0154169051908152f35b905034610498576020366003190112610498576001903591610ae16117a3565b8284526038602052610b1d81852060396020528286203387526020528286209086825495838288955501556001600160a01b03339154166117f9565b519081527fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059560203392a36001805580f35b905034610498578160031936011261049857610b6861129f565b610b70611284565b9084549260ff8460081c161593848095610d0d575b8015610cf6575b15610c9c5760ff198116600117875584610c8b575b5060206001600160a01b03809316836bffffffffffffffffffffffff60a01b958287603454161760345516856033541617603355865192838092638da5cb5b60e01b82525afa908115610c81578691610c63575b501690603554161760355542603b55825490610c1f60ff8360081c16610c1a81611380565b611380565b60018055610c2b578280f35b61ff001916825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b610c7b915060203d8111610968576109598183611329565b38610bf5565b85513d88823e3d90fd5b61ffff191661010117865538610ba1565b855162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610b8c5750600160ff821614610b8c565b50600160ff821610610b85565b9190503461049857610d2b366112c6565b919092610d366117a3565b8385526038602052818520906039602052828620338752602052828620805491858310610e145750610d7c91610da791600385019164e8d4a51000948591845490611653565b0494610d8e6001830196875490611500565b80610e04575b508780610ddb575b505054905490611653565b049055519081527ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56860203392a36001805580f35b610dfd91610dea828554611500565b84556001600160a01b03339154166117f9565b3887610d9c565b610e0e9033611a53565b38610d94565b606490602086519162461bcd60e51b8352820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152fd5b5050346101605781600319360112610160576020906001600160a01b03603554169051908152f35b90503461049857606036600319011261049857803591602435610e916112b5565b602460206001600160a01b03603454168551928380926337b87c3960e21b8252338a8301525afa908115610fa05761ffff9291610ed491899161050857506113f8565b16610ee3612710821115611468565b848652603860205260019384848820015493610f0a84610f0587603a54611500565b6114b3565b603a5586885260386020528386828a2001558720019061ffff1982541617905515159081610f97575b50610f3c578280f35b6036548391845b828110610f67575b50505015610f5857808280f35b610f61906114c0565b38808280f35b84610f71826112dc565b90549060031b1c14610f8b57610f8690611443565b610f43565b50915050388080610f4b565b90501538610f33565b84513d89823e3d90fd5b505034610160578160031936011261016057602090603a549051908152f35b91905034610498576020366003190112610498578060a093833581526038602052206001600160a01b038154169260018201549261ffff600284015492600385015494015416938151958652602086015284015260608301526080820152f35b5050346101605781600319360112610160576020906037549051908152f35b8385913461049857606036600319011261049857833590611067611284565b926110706112b5565b6001600160a01b03948386603454166337b87c3960e21b8252338a83015281602460209788935afa90811561127a578792916110b2918a9161125d57506113f8565b1692838752603c815260ff838820541661122e5761ffff809216926110db612710851115611468565b60375496603b54804211600014611228575042915b6110fc88603a546114b3565b603a55868a52603c8452808a20805460ff1916600117905580519360a0850167ffffffffffffffff811186821017611215579160388c94928e97969483528a87528087019b8c528287019485528c6060880196808852608089019b8c5252528b20935116976bffffffffffffffffffffffff60a01b98898554161784555160018401555160028301555160038201550191511661ffff19825416179055603754600160401b8110156112025760018101806037558110156111ef57849550603761050595527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae01918254161790556114c0565b634e487b7160e01b855260328652602485fd5b634e487b7160e01b855260418652602485fd5b634e487b7160e01b8c5260418d5260248cfd5b916110f0565b8760649184519162461bcd60e51b8352820152600a602482015269191d5c1b1a58d85d195960b21b6044820152fd5b6112749150873d891161052f576105218183611329565b8b6104f9565b84513d8a823e3d90fd5b602435906001600160a01b038216820361129a57565b600080fd5b600435906001600160a01b038216820361129a57565b6044359061ffff8216820361129a57565b604090600319011261129a576004359060243590565b6036548110156113135760366000527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b80190600090565b634e487b7160e01b600052603260045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761134b57604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261129a57516001600160a01b038116810361129a5790565b1561138757565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b9081602091031261129a5751801515810361129a5790565b156113ff57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60001981146114525760010190565b634e487b7160e01b600052601160045260246000fd5b1561146f57565b606460405162461bcd60e51b815260206004820152602060248201527f696e76616c6964206465706f7369742066656520626173697320706f696e74736044820152fd5b9190820180921161145257565b60365490600160401b82101561134b576114e38260016114fe94016036556112dc565b90919082549060031b600019811b9283911b16911916179055565b565b9190820391821161145257565b60368054801561164d576000838152603860205260408120946001600160a01b038654161561161c57815b838110611549575b50505050505050565b85611553826112dc565b919054600392831b1c14611570575061156b90611443565b611538565b9660019193949596500190815415908115611614575b50611592575b80611540565b8290556000199280840190811161160057906114e36115b36115bf936112dc565b905490881b1c916112dc565b82549081156115ec57508101926115d5846112dc565b81939154921b1b191690555538808080808061158c565b634e487b7160e01b81526031600452602490fd5b634e487b7160e01b83526011600452602483fd5b905038611586565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd08199bdd5b9960ba1b6044820152606490fd5b50505050565b8181029291811591840414171561145257565b8115611670570490565b634e487b7160e01b600052601260045260246000fd5b906000918252603860205260408220906002820192835442111561164d5760249160206001600160a01b03855416604051948580926370a0823160e01b82523060048301525afa928315611798578293611765575b5082158015611759575b611750576116f7906001850154611653565b9064e8d4a510009182810292818404149015171561173c575061172b61173592611726600393603a5490611666565b611666565b92019182546114b3565b9055429055565b634e487b7160e01b81526011600452602490fd5b50505050429055565b506001840154156116e5565b9092506020813d8211611790575b8161178060209383611329565b81010312610160575191386116db565b3d9150611773565b6040513d84823e3d90fd5b6002600154146117b4576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b916001600160a01b036040519263a9059cbb60e01b6020850152166024830152604482015260448152608081019181831067ffffffffffffffff84111761134b576114fe926040525b6001600160a01b039092919216604051604081019367ffffffffffffffff948281108682111761134b576040526020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848401526000808386829551910182855af1903d15611972573d96871161195e576118e2949596604051906118d488601f19601f8401160183611329565b81528093873d92013e61197f565b805190816118ef57505050565b82806118ff9383010191016113e0565b156119075750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b634e487b7160e01b83526041600452602483fd5b91506118e2939495506060915b919290156119e15750815115611993575090565b3b1561199c5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156119f45750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510611a3a575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350611a17565b906001600160a01b0391826033541692604051926370a0823160e01b8452306004850152602084602481885afa938415611ae657600094611ab3575b5083811115611aa757506114fe9350603354166117f9565b9250506114fe926117f9565b90936020823d8211611ade575b81611acd60209383611329565b810103126107525750519238611a8f565b3d9150611ac0565b6040513d6000823e3d90fdfea26469706673582212206a6376cb07056afd3875f4c719e6f5da0ec5de2fe059650328c15fbad8d298a164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Tells the address of the owner",
        "returns": {
          "_0": "the address of the owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 314,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 372,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10732,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "baseToken",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IERC20)6319"
      },
      {
        "astId": 10735,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "insurancePool",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(InsurancePool)14108"
      },
      {
        "astId": 10737,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "feeAddress",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 10740,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "poolInfoPidList",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10743,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "poolInfoDummyList",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10748,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_uint256,t_struct(PoolInfo)10729_storage)"
      },
      {
        "astId": 10755,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "userInfo",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)10717_storage))"
      },
      {
        "astId": 10757,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 10759,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 10916,
        "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
        "label": "poolExistence",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_contract(IERC20)6319,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)6319": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(InsurancePool)14108": {
        "encoding": "inplace",
        "label": "contract InsurancePool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)10717_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct InsuranceMasterchef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)10717_storage"
      },
      "t_mapping(t_contract(IERC20)6319,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)6319",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)10717_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct InsuranceMasterchef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)10717_storage)"
      },
      "t_mapping(t_uint256,t_struct(PoolInfo)10729_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InsuranceMasterchef.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)10729_storage"
      },
      "t_struct(PoolInfo)10729_storage": {
        "encoding": "inplace",
        "label": "struct InsuranceMasterchef.PoolInfo",
        "members": [
          {
            "astId": 10720,
            "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)6319"
          },
          {
            "astId": 10722,
            "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10724,
            "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10726,
            "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10728,
            "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
            "label": "depositFeeBP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)10717_storage": {
        "encoding": "inplace",
        "label": "struct InsuranceMasterchef.UserInfo",
        "members": [
          {
            "astId": 10714,
            "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10716,
            "contract": "contracts/InsuranceMasterchef.sol:InsuranceMasterchef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}